!********************* su_pla2    ***********************
!
!e+++
! Creates a parallell B_PLANE at a given distance
!
! Input is B_PLANE and a distance.
!
! Output is a parallell B_BPLANE with local identity (reference) #1.
!e---
!s+++
! Skapar ett parallellt plan p} ett givet avst}nd.
!
! Indata {r ett B_PLANE och ett avst}nd.
!
! Utdata {r ett B_PLANE med lokala identiteten (referensen) #1.
!s---
!
! Revision history
! ________________
!
! 1996-01-27  Gunnar Liden
! 1996-05-17  parbplanv0 -> su_pla2 Gunnar Liden
! 
!*******************************************************

!sdescs Skapa ett parallellt B_PLANE p} ett givet avst}nd
!sdesce Create a parallell B_PLANE at a given distance

GLOBAL GEOMETRY MODULE su_pla2   (

REF bpl1_id           >"@t32768 Peka p} B_PLANE"; 
FLOAT dist    := 30.0 >"Parallellt avst}nd (med tecken)";
INT    graphic:= 1   > "Grafik=0: Blanka allt Grafik=1: Visa B_PLANE Grafik=2: Visa allt");

!e REF bpl1_id           >"@t32768 Select B_PLANE"; 
!e FLOAT dist    := 30.0 >"Parallell distance (with sign)";
!e INT    graphic:= 1   > "Eq. 0: Blank all Eq. 1: Show B_PLANE Eq. 2: Show all");


! Internal variables:

  
  VECTOR     p1,p2,p3,p4;        ! B-plane 1 corner points 

  VECTOR     n_plane;            ! Plane normal 

  INT        b_flag;             ! Blank value for output B-plane

  INT        DEBUG;              ! For Debug
                                 ! Eq. 0 ==> No        DEBUG
                                 ! Eq. 1 ==> Full      DEBUG

  STRING    s*1;                 ! For DEBUG 

BEGINMODULE

!e+++
! Algorithm
! _________
!e---
!s+++
! Algorithm
! _________
!s---

!e+++
! Initializations and checks of input data
!e---
!s+++
! Initiera variabler ock kontrollera indata
!s---


   DEBUG := 0;                       ! Change to 0 or 1


  IF   graphic = 0 THEN          ! Eq. 0: Blank all
    b_flag  := 1;                ! Blank B_PLANE
  ELIF graphic = 1 THEN          ! Eq. 1: Show B_PLANE
    b_flag  := 0;                ! Show  B_PLANE
  ELIF graphic = 2 THEN          ! Eq. 2: Show all      
    b_flag  := 0;                ! Show  B_PLANE
  ELSE                           !
    EXIT("su_pla2 graphic "+     !
        "not 0, 1 or 2");        ! 
  ENDIF;                         !

   n_plane := VEC(0,0,0);        ! Initialize internal variable

!e+++
! Get B_PLANE corner points
!e--- 
!s+++
! H{mta h|rnpunkter f|r indata B_PLANE
!s--- 


  GETBPL(bpl1_id,p1,p2,p3,p4); 

!e+++
! Calculate plane normal n_plane= (p2-p1) X (p4-p1) (normalized)
!e--- 
!s+++
! Ber{kna plan normal med kryssprodukt n_plane= (p2-p1)X(p4-p1). Normalisera.
!s--- 

  n_plane := VPROD(p2-p1,p4-p1);
  n_plane := VECN(n_plane);

!e+++
! Create parallell B-plane
!e--- 
!e+++
! Skapa ett parallellt B_PLAN med fyra punkter translaterade fr}n indata
! planets h|rnpunkter med det givna avst}ndet i planets normal riktning.
!e--- 

  B_PLANE(#1,p1+dist*n_plane,p2+dist*n_plane,
             p3+dist*n_plane,p4+dist*n_plane:BLANK=b_flag);

! +++
! Printout of data for DEBUG= 1
! ---

  IF  DEBUG = 1  THEN
  LST_INI("su_pla2   0 Parallell dist= "+STR(dist,-15,8)+" B-plane "+RSTR(bpl1_id));
  LST_LIN("n_plane  "+STR( n_plane.x,8,5)+" "
                     +STR( n_plane.y,8,5)+" "
                     +STR( n_plane.z,8,5));
  LST_EXI();
  ENDIF;

!e+++
! Show normal plane direction for graphic= 2
!e---
!s+++
! Visa planets normalriktning f|r grafik = 2
!s---

  IF  graphic = 2 THEN
    LIN_FREE(#2, p1, p1 + VECL(p2-p1)*0.5*n_plane:PEN=3);
    LIN_FREE(#3, p2, p2 + VECL(p2-p1)*0.5*n_plane:PEN=3);
    LIN_FREE(#4, p3, p3 + VECL(p2-p1)*0.5*n_plane:PEN=3);
    LIN_FREE(#5, p4, p4 + VECL(p2-p1)*0.5*n_plane:PEN=3);
    LIN_FREE(#6, p1, p1 +      dist      *n_plane:PEN=2);
    LIN_FREE(#7, p2, p2 +      dist      *n_plane:PEN=2);
    LIN_FREE(#8, p3, p3 +      dist      *n_plane:PEN=2);
    LIN_FREE(#9, p4, p4 +      dist      *n_plane:PEN=2);
  ENDIF;

ENDMODULE
