!********************* c_anaderv0 ***********************
! +++
! Creates a porcupine showing the length of a selected            
! derivative vector
! 
! ---
! Revision history
! ________________
!
! 1997-03-08  Gunnar Liden
! 
!*******************************************************

!sdescs Staket som visar längd av derivata vektor 
!sdesce Porcupine showing length of derivative vector

GLOBAL GEOMETRY MODULE c_anaderv0(

REF   cur_id           > "@t8  Select curve";
STRING deriv*10 := "DRDV" >"Vector DRDU, DRDV, ..... ";
INT   n_poi  := 20     > "Number of added points per segment 0. 1, 2, 3, ..";
FLOAT l_scale:= 0.3    > "Scaling factor length (negative also allowed)";
FLOAT d_scale:= 0.2    > "Scaling factor derivative vector";
INT   c_list := 1      > "Eq. 0: No printout  Eq. 1: Print angles";
INT   graphic:= 1      >"Graphic 0: None 1: Porcupine 2: All");

! Internal variables:

  INT        i_seg;              ! Loop index curve segment
  INT        i_poi;              ! Loop index point in segment
  
  INT        ns_geo;             ! Number of geometric segments
  INT        ns_gra;             ! Number of graphical segments
  INT        fnt;                ! Font 
  FLOAT      sl;                 ! Dash length

  FLOAT      delta;              ! Delta parameter värde

  INT        n_tot;              ! Totala antalet punkter

  FLOAT      s_u;                ! Start punkt parametervärde
  VECTOR     s_pt;               ! Start punkt
  VECTOR     s_rad;              ! Start tangent punkt

  REF        sur_id;             ! Reference to surface
  VECTOR     uv_sur;             ! UV point on surface
  VECTOR     s_n;                ! Current surface normal
  VECTOR     s_d;                ! Current surface derivative

  FLOAT      l_der;              ! Length of derivative vector

  INT        b_aflag;            ! BLANK value all other entities
  INT        b_pflag;            ! BLANK value porcupine

  INT        DEBUG;              ! For Debug
  STRING     s*1;                ! For INPMT

BEGINMODULE

! +++
! Algorithm
! _________
! ---

! +++
! 1. Initializations and checks
! ---


! Change to 0 or 1
  DEBUG := 0;

! List window
  IF    c_list = 1  THEN
  LST_INI("Printout of derivative "+deriv+" length (Module: c_anaderv0  ");
  ELIF  c_list = 0  THEN
    ;
  ELSE
    EXIT("c_anaderv0 Print flag not OK");
  ENDIF;

! Check number of added points
  IF n_poi < 0   THEN
    EXIT("c_anaderv0: n_poi <  0");
  ENDIF;

! Check graphic
  IF    graphic = 0  THEN
    b_aflag:= 1;
    b_pflag:= 1;
  ELIF  graphic = 1  THEN 
    b_aflag:= 1;
    b_pflag:= 0;
  ELIF  graphic = 2  THEN
    b_aflag:= 0;
    b_pflag:= 0; 
  ELSE 
    EXIT("c_anaderv0: graphic not OK");
  ENDIF;

! Retrieve number of segments
  GETCURH(cur_id, fnt,sl,ns_geo,ns_gra);

  IF DEBUG = 1 THEN 
    s:=INPMT("c_anaderv0 ns_geo " +STR(ns_geo,-1,0),"",1);
  ENDIF;

! +++
! 2. Calculate derivative and create porcupine
! ---

! Number of created lines
  n_tot:= 0;

! Delta U 
  delta := 1.0/(n_poi+1);

! Start loops segments and points within segment
  FOR  i_seg:= 1 TO ns_geo DO
    FOR  i_poi := 0 TO n_poi+1 DO

!     An additional point
      n_tot := n_tot + 1;

!     Current parameter value
      s_u  := i_seg - 1.0 + i_poi*delta;

!     End point of current segment
      IF  i_poi = n_poi + 1 THEN
        s_u := s_u - 0.01;
      ENDIF;

!     Current R*3 point on curve  
      s_pt :=  ON(cur_id,s_u);

!     Current U,V point on surface 
      PART(#30, eval_utouv ( cur_id, s_u , sur_id, uv_sur):SAVE=0);

      IF uv_sur.x <  0.0 THEN
!       Not a surface curve
        IF  c_list = 1 THEN
        LST_LIN(STR(n_tot,5,0)+" U "+STR(s_u,5,3)+ " Not a surface point (segment)" );
        ENDIF;
        GOTO nxtpt;
      ENDIF;

!     Current surface normal
      s_n  := NORM(sur_id, uv_sur);

!     Current derivative and length
      s_d  := EVAL(sur_id, deriv, uv_sur);
      l_der := VECL(s_d);

!     Create porcupine line (scaled)
      IF     l_der*l_scale  > 0.1 AND
              i_poi  < n_poi + 1             THEN
        LIN_FREE(#1, s_pt, s_pt + (l_der*l_scale)*s_n:PEN=2);
      ELIF   l_der*l_scale  > 0.1 AND
              i_poi  = n_poi + 1             THEN
        LIN_FREE(#2, s_pt, s_pt + (l_der*l_scale)*s_n:PEN=4);
      ENDIF;

!     Draw derivative vector 
      IF     l_der*d_scale  > 0.1   THEN
        LIN_FREE(#3, s_pt, s_pt + d_scale*s_d:PEN=3);
      ENDIF;

!     Write data
      IF    c_list = 1  THEN
      LST_LIN(STR(n_tot,5,0)+" U "+STR(s_u,5,3)+ 
      " Length "+STR(l_der ,12,5)+" Derivative "+deriv);
      LST_LIN(STR(n_tot,5,0)+" s_d "+STR(s_d.x,12,6)+ 
                                 " "+STR(s_d.y,12,6)+ 
                                 " "+STR(s_d.z,12,6));
      ENDIF; 

nxtpt:; ! Label: Not a surface point (segment)

!   End loops
    ENDFOR;
  ENDFOR;

  IF    c_list = 1  THEN
  LST_EXI();
  ENDIF; 



ENDMODULE
