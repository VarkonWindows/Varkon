!********************** s_cdeforv0 ********************************
! +++ 
!
! Deformation of a wing surface with a given twist function
!
! The function assumes that the profiles of the wing are constant
! U lines.
!
! ---
! Revision history
! ________________
!
! 1996-11-08 Elsa
!
!******************************************************************

GLOBAL GEOMETRY MODULE s_cdeforv0 (
REF    s_id                        >"Surface reference";
REF    ang_id                      >"Curve reference";
VECTOR v_lead    := VEC(0,0,1)     >"Vector criterion for leading edge";
INT    graphic   :=   2            >"Graphics 0: No surface 1: Surface 2: All");

!sdesce Deformation of a wing surface with a random twist function
!sdescs Deformation av en vinge med slumpmässig twist kurva


! Internal variables

  INT    DEBUG;                   ! Eq. 0: No      debug
                                  ! Eq. 1: Full    debug
                                  ! Eq. 2: Reduced debug

  VECTOR s_n;                     ! Current surface normal

  FLOAT  dot_start;               ! Start scalar product s_n*v_lead
  FLOAT  dot;                     ! Current scalar product s_n*v_lead
  VECTOR uv_sur;                  ! Parameter point on the surface
  INT    l_v;                     ! Leading edge V value

  INT    npatu;                   ! Number of U patches
  INT    npatv;                   ! Number of V patches
  INT    i_u;                     ! Loop index U line
  INT    i_v;                     ! Loop index V line

  REF    rot_id;                  ! Identity for rotation line
  REF    i_id;                    ! Isoparameter identity
  REF    a_id;                    ! Approx. isoparameter identity
  REF    tra_id;                  ! Transformation identity
  REF    c_id;                    ! Current U section curve

  VECTOR poi(111);                ! Points for angle curve 
  FLOAT  rot_ang;                 ! Current rotation angle
  VECTOR rot_poi;                 ! Point on rotation curve
  VECTOR p1_l;                    ! Start point rotation line
  VECTOR p2_l;                    ! End   point rotation line

  INT    no_ulines;               ! Number of U curves
  INT    no_vlines;               ! Number of V curves
  REF    id_all(111);             ! Id's to all U lines
  VECTOR pts(111,111);            ! Points
!  VECTOR tgs(111,111);            ! Tangents
  STRING metod*15;                ! Method for tangent length calculation 

  INT    b_val_a;                 ! Blank value for all geometry
  INT    b_val_s;                 ! Blank value for surface

  STRING s*1;                     ! For Debug 
  

BEGINMODULE
 
! +++
! Algorithm
! _________
! ---

! +++
! 1. Initializations and checks
! ---

  DEBUG:= 0;                            ! Change to 0, 1 or 2

  IF    graphic = 0 THEN                ! Check graphics
    b_val_s := 1;                       !
    b_val_a := 1;                       !
  ELIF  graphic = 1 THEN                !
    b_val_s := 0;                       !
    b_val_a := 1;                       !
  ELIF  graphic = 2 THEN                !
    b_val_s := 0;                       !
    b_val_a := 0;                       !
  ELSE                                  !
    EXIT("s_cdeforv0 Graphic not OK");  !
  ENDIF;                                !

  IF  DEBUG = 1 THEN                    ! Debug
  LST_INI("Debug printout from "+       !
          "s_cdeforv0");                !
  ENDIF;                                !

  dot_start := -0.123456789;            !
  dot       := -0.123456789;            !

  FOR  i_u := 1 TO 111 DO               !
    FOR  i_v := 1 TO 111 DO             !
      pts(i_u,i_v):= VEC(-0.123456789, -0.123456789, -0.123456789);
!      tgs(i_u,i_v):= VEC(-0.123456789, -0.123456789, -0.123456789);
    ENDFOR;                             !
  ENDFOR;                               !

! +++
! Retrieve number of patches
! ---

  GETSURH(s_id,"NPATU",npatu);          ! Retrieve number of U patches
  GETSURH(s_id,"NPATV",npatv);          ! Retrieve number of V patches

  IF  DEBUG = 1 THEN  
  LST_LIN("Number of U patches npatu "+STR(npatu,4,0)); 
  LST_LIN("Number of V patches npatv "+STR(npatv,4,0)); 
  ENDIF;             

! +++
! 2. Find leading edge
! ---
 
  l_v := -12345;                        ! Leading edge V value

  FOR i_v:= 0 TO npatv DO               ! Start loop V lines

    uv_sur := VEC(npatu/2.0,i_v);       !
    s_n := NORM(s_id,uv_sur);           ! Current surface normal
    IF i_v   = 0 THEN                   ! 
      dot_start := s_n*v_lead;          ! Start scalar product s_n*v_lead
    ELSE                                !
      dot       := s_n*v_lead;          ! Current scalar product s_n*v_lead
      IF    dot_start > 0 AND           !
            dot       < 0    THEN       !
        l_v  := i_v;                    ! Leading edge
        dot_start := 0.0;               !
      ELIF  dot_start > 0 AND           !
            dot       < 0    THEN       !
        l_v  := i_v;                    ! Leading edge
        dot_start := 0.0;               !
      ENDIF;                            !
    ENDIF;                              !

  ENDFOR;                               ! End  loop V lines

  IF  l_v <= 0 THEN                     ! 
    EXIT("s_cdeforv0 Leading edge");    !
  ENDIF;                                !

  IF  DEBUG = 1 THEN  
  LST_LIN("Leading edge l_v "+STR(l_v,3,0)); 
  ENDIF;             

! +++
! 3. Create rotation line  
! ---

  LIN_FREE(#2, ON(s_id,VEC( 0.0, l_v)),
               ON(s_id,VEC( 0.0 ,0.0)):BLANK=b_val_a,PEN=3);
  LIN_FREE(#3, ON(s_id,VEC(npatu,l_v)),
               ON(s_id,VEC(npatu,0.0)):BLANK=b_val_a,PEN=3);

  LIN_FREE(#4, ON(GLOBAL_REF(#2),0.5) ,
               ON(GLOBAL_REF(#3),0.5) :BLANK=b_val_a,PEN=2);
  rot_id := GLOBAL_REF(#4);
  p1_l   := ON(rot_id,0.0);
  p2_l   := ON(rot_id,1.0);


! +++
! 4. Rotate U section curves (wing profiles)       
! ---

  FOR i_u:= 0 TO  npatu DO              ! Start loop U lines 

    CUR_ISO(#6,s_id,"U",i_u,0.0,npatv   ! Create isoparameter
               :BLANK=b_val_a,PEN=3);   !
    i_id := GLOBAL_REF(REFC(6,i_u+1));  !
    CUR_APPROX(#7, i_id,"CUB_SEG",      ! Approximate isoparameter
                    1, 1                !
               :BLANK=b_val_a,PEN=1);   !
    a_id := GLOBAL_REF(REFC(7,i_u+1));  !
    
    rot_poi := ON(ang_id,i_u);          ! Point on rotation curve
    rot_ang := rot_poi.y;               !
    IF  DEBUG = 1 THEN  
    LST_LIN("i_u "+STR(i_u,3,0)+" Angle "+STR(rot_ang,4,3)); 
    ENDIF;                
    TFORM_ROTL(#8,p1_l,p2_l,rot_ang);   ! Rotation matrix
    tra_id:= GLOBAL_REF(REFC(8,i_u+1)); !

    TCOPY(#9  ,a_id, tra_id, 0);        ! Rotate curve
    id_all(i_u+1) :=                    !
      GLOBAL_REF(REFC(9,i_u+1));        !

  ENDFOR;                               ! End   loop U lines

! +++
! 6. Create points and tangents for surface        
! ---

  FOR    i_u := 0 TO npatu DO           ! Start loop U lines 
    FOR  i_v := 0 TO npatv DO           ! Start loop V lines
      c_id := id_all(i_u+1);            ! Current curve identity
      pts(i_u+1,i_v+1) := ON(c_id,i_v); !
    ENDFOR;                             ! End   loop V lines
  ENDFOR;                               ! End   loop U lines
   
  metod := "ADINI_1";                   !
  no_ulines := npatu +1;                !
  no_vlines := npatv +1;                !
  SUR_SPLARR(#1,metod,                  ! Create surface
             no_ulines,no_vlines,       ! 
             pts                        !
      :BLANK=b_val_s);                  ! 

  
  IF  DEBUG = 1 THEN                    ! Debug
  LST_EXI();                            !
  ENDIF;                                !
 
  
ENDMODULE

