!********************* rectangle_data ***********************
! +++
! Returns data for profile_rectangle
!
! ---
! Revision history
! ________________
!
! 2023-01-31  Gunnar Liden
! 
!*******************************************************

!sdesce Returns data for profile_rectangle

BASIC GEOMETRY MODULE rectangle_data(
    INT    set_profile;      ! A set of variable values defing one profile
	FLOAT  rel_arclength;    ! Relative arclength 0.0 - 1.0
VAR REF    id_upper_curve;   ! Id upper corner curve	
VAR REF    id_radius_curve;  ! Id fillet radius curve
VAR FLOAT  width_rectangle;  ! Rectangle width
VAR FLOAT  height_rectangle; ! Rectangle height
VAR FLOAT  fillet_radius;    ! Fillet radius
VAR FLOAT  rotation_angle;   ! Profile rotation angle
VAR INT    n_pts_approx;     ! Number of approximation points
    INT    graphic_case);    ! Graphic case

! Internal variables:

FILE       f_d;                    ! Debug file
CONSTANT INT debug_flag = 0;       ! Eq. 1: Write to debug file
CONSTANT STRING file_name = "C:\Varkon\app\Art\job\debug\rectangle_data.txt"; 

STRING s_inpmt*132;                ! Return string INPMT

INT    b_val_lin;                  ! Blank value lines
INT    b_val_cur;                  ! Blank value curves
INT    b_val_pts;                  ! Blank value points

! Data for set one (set_profile=1)
CONSTANT FLOAT  half_square_1            = 400.0;
CONSTANT VECTOR vec_start_1               = VEC(-4.0, 20.0, 0.0);
CONSTANT FLOAT  p_value_1                 = 0.4;
CONSTANT VECTOR poi_start_1               = VEC(0.0, 0.0, 0.0);
CONSTANT VECTOR vec_end_1                 = VEC(10.0, 0.0, 0.0);

CONSTANT FLOAT fillet_radius_one_1        =   4.0;
CONSTANT FLOAT fillet_radius_two_1        =  19.0;
CONSTANT FLOAT fillet_radius_two_arcl_1   = 100.0;
CONSTANT FLOAT fillet_radius_three_1      =  45.0;
CONSTANT FLOAT fillet_radius_three_arcl_1 = 600.0;
CONSTANT FLOAT fillet_radius_four_1       =   2.0;

CONSTANT INT    n_pts_approx_1            =   0;


! Data for set one (set_profile=2)
CONSTANT FLOAT  half_square_2             = 400.0;
CONSTANT VECTOR vec_start_2               = VEC(-4.0, 20.0, 0.0);
CONSTANT FLOAT  p_value_2                 = 0.4;
CONSTANT VECTOR poi_start_2               = VEC(0.0, 0.0, 0.0);
CONSTANT VECTOR vec_end_2                 = VEC(10.0, 0.0, 0.0);

CONSTANT FLOAT fillet_radius_one_2        =   31.3;
CONSTANT FLOAT fillet_radius_two_2        =   31.3;
CONSTANT FLOAT fillet_radius_two_arcl_2   = 100.0;
CONSTANT FLOAT fillet_radius_three_2      =   31.3;
CONSTANT FLOAT fillet_radius_three_arcl_2 = 600.0;
CONSTANT FLOAT fillet_radius_four_2       =   31.3;

CONSTANT INT    n_pts_approx_2            =   0;


! Data for set one (set_profile=3)
CONSTANT FLOAT  half_square_3             = 400.0;
CONSTANT VECTOR vec_start_3               = VEC(20.0, -10.0, 0.0);
CONSTANT FLOAT  p_value_3                 = 0.46;
CONSTANT VECTOR poi_start_3               = VEC(0.0,  0.0, 0.0);
CONSTANT VECTOR vec_end_3                 = VEC(10.0, 0.0, 0.0);

CONSTANT FLOAT fillet_radius_one_3        =    1.2;
CONSTANT FLOAT fillet_radius_two_3        =    1.2;
CONSTANT FLOAT fillet_radius_two_arcl_3   = 100.0;
CONSTANT FLOAT fillet_radius_three_3      =   1.2;
CONSTANT FLOAT fillet_radius_three_arcl_3 = 600.0;
CONSTANT FLOAT fillet_radius_four_3       =   1.2;

CONSTANT INT    n_pts_approx_3            =   0;



! Parameters for the rectangle corner curve
FLOAT  half_square;                  ! Length half quadrat
VECTOR poi_start;                     ! Conic start point
VECTOR vec_start;                     ! Conic start vector
FLOAT  p_value;                       ! Conic P value
VECTOR poi_end;                       ! Conic end point
VECTOR vec_end;                       ! Conic end vector

! Parameters for the calculation of output lengths and angle
FLOAT  arcl_tot;                      ! Total curve length
FLOAT  arcl_current;                  ! Current arc length
FLOAT  cur_t;                         ! Current curve parameter value

VECTOR poi_line_start;                ! Start point line
VECTOR poi_line_end;                  ! End point line
		 
VECTOR tang_start;                    ! Curve tangent (debug)
VECTOR norm_start;                    ! Curve normal (debug)


! Parameters for the fillet radius curve
! --------------------------------------

CONSTANT FLOAT eps_extend = 0.1;       ! Extend for intersect
VECTOR p_one, p_two, p_three, p_four;  ! Conic points
VECTOR v_one, v_two, v_three, v_four;  ! Conic vectors
FLOAT  current_arcl;                   ! Current arc length
FLOAT  value_curve;                    ! Intersect value

! Parameters for the adjustment 
! Minimum values are set in profile_rectangle
CONSTANT FLOAT min_radius = 0.45;      ! Minimum radius (eps_fillet=0.05)
CONSTANT FLOAT min_length = 1.00;      ! Minimum height and width


REF    id_lower_curve;                 ! Id lower corner curve
FLOAT  width_adjusted;                 ! Adjusted quadrat width
FLOAT  fillet_adjusted;                ! Adjusted fillet radius	


!CONSTANT FLOAT pixel_scale = 1.33;    ! Correction for screen 2560 X 1440
CONSTANT FLOAT pixel_scale  = 1.00;    ! Do only scale here for test/debug

BEGINMODULE

    IF set_profile < 1 OR set_profile > 3 THEN
	    EXIT("rectangle_data Set of rectagle data for " + 
		      STR(set_profile, -1, 0) + " is not implemented");
	ENDIF;
	

	! Set blank values
	IF     graphic_case = 0 THEN
	  b_val_lin := 1;
	  b_val_cur := 1;
	  b_val_pts := 1;
	ELIF   graphic_case = 1 THEN
	  b_val_lin := 1;
	  b_val_cur := 0;
	  b_val_pts := 0;
	ELIF   graphic_case = 2 THEN
	  b_val_lin := 0;
	  b_val_cur := 0;
	  b_val_pts := 0;
	ELSE
	  b_val_lin := 0;
	  b_val_cur := 0;
	  b_val_pts := 0;
	ENDIF;

!   Initialize outout values	
    width_rectangle := 0.123456789; 
    height_rectangle := 0.123456789; 
    fillet_radius := 0.123456789;   
    rotation_angle := 0.123456789; 
    n_pts_approx := 0; 

!   Set data
!   --------
  
    IF set_profile = 1 THEN
   
        half_square := half_square_1;
	   
	    poi_start := poi_start_1;
	    vec_start := vec_start_1;
	    p_value   := p_value_1;
	    poi_end   := VEC(half_square, half_square, 0.0);
	    vec_end   := vec_end_1;
 
        n_pts_approx := n_pts_approx_1;
		
    ELIF set_profile = 2 THEN
   
        half_square := half_square_2;
	   
	    poi_start := poi_start_2;
	    vec_start := vec_start_2;
	    p_value   := p_value_2;
	    poi_end   := VEC(half_square, half_square, 0.0);
	    vec_end   := vec_end_2;
		
        n_pts_approx := n_pts_approx_2;
		
    ELIF set_profile = 3 THEN
   
        half_square := half_square_3;
	   
	    poi_start := poi_start_3;
	    vec_start := vec_start_3;
	    p_value   := p_value_3;
	    poi_end   := VEC(half_square, half_square, 0.0);
	    vec_end   := vec_end_3;
		
        n_pts_approx := n_pts_approx_3;
		
     ELSE
        EXIT("rectangle_data Unvalid set_profile= " + STR(set_profile, -1, 0) + " (1)");  
    ENDIF;
	
	!LIN_FREE(#77, poi_start, poi_start + 20.0*vec_start);
	!LIN_FREE(#78, poi_end, poi_end + 20.0*vec_end);

!   Create the rectangle right upper corner curve 
	CUR_CONIC(#1, "FREE", poi_start, poi_start + vec_start, p_value,
	                      poi_end, poi_end + vec_end
						  :  BLANK= 1, PEN=2);
	
!   Create the rectangle right lower corner curve 
	TFORM_ROTP(#2, VEC(0.0, 0.0, 0.0), -90.0);
	
	TCOPY(#3, #1, #2, 1 :  BLANK= 1, PEN=2);
	
!   Scale for screen correction (only for test/debug)	
    TFORM_MOVE(#30, VEC(0.0, 0.0, 0.0), VEC(0.0, 0.0, 0.0), 1.0, pixel_scale, 1.0);
	TCOPY(#31, #1, #30, 1 :  BLANK= b_val_cur, PEN=4);
	TCOPY(#32, #3, #30, 1 :  BLANK= b_val_cur, PEN=4);
	
	id_upper_curve := GLOBAL_REF(#31);
	id_lower_curve := GLOBAL_REF(#32);
	
!   Create the curve defining the fillet radius
    IF set_profile = 1 THEN
   
		p_one   := VEC(      0.0 - eps_extend,     fillet_radius_one_1,   0.0);
		p_two   := VEC(fillet_radius_two_arcl_1,   fillet_radius_two_1,   0.0);
		p_three := VEC(fillet_radius_three_arcl_1, fillet_radius_three_1, 0.0);
		p_four  := VEC(  1000.0 + eps_extend,      fillet_radius_four_1,  0.0);
		
		v_one   := VEC( 1.0,  1.8,   0.0);
		v_two   := p_three - p_two;
		v_three := VEC( 1.0,  0.0,   0.0);
		v_four  := VEC( 1.0, -1.5,   0.0);
		
    ELIF set_profile = 2 THEN
   
		p_one   := VEC(      0.0 - eps_extend,     fillet_radius_one_2,   0.0);
		p_two   := VEC(fillet_radius_two_arcl_2,   fillet_radius_two_2,   0.0);
		p_three := VEC(fillet_radius_three_arcl_2, fillet_radius_three_2, 0.0);
		p_four  := VEC(  1000.0 + eps_extend,      fillet_radius_four_2,  0.0);
		
		v_one   := VEC( 1.0,  0.0,   0.0);
		v_two   := p_three - p_two;
		v_three := VEC( 1.0,  0.0,   0.0);
		v_four  := VEC( 1.0,  0.0,   0.0);
		
    ELIF set_profile = 3 THEN
   
		p_one   := VEC(      0.0 - eps_extend,     fillet_radius_one_3,   0.0);
		p_two   := VEC(fillet_radius_two_arcl_3,   fillet_radius_two_3,   0.0);
		p_three := VEC(fillet_radius_three_arcl_3, fillet_radius_three_3, 0.0);
		p_four  := VEC(  1000.0 + eps_extend,      fillet_radius_four_3,  0.0);
		
		v_one   := VEC( 1.0,  0.0,   0.0);
		v_two   := p_three - p_two;
		v_three := VEC( 1.0,  0.0,   0.0);
		v_four  := VEC( 1.0,  0.0,   0.0);

		
	ENDIF;
	

	
	CUR_CONIC(#6, "FREE", p_one,   p_one   + v_one,   0.5,
	                      p_two,   p_two   + v_two,   0.5,
						  p_three, p_three + v_three, 0.5,
						  p_four,  p_four  + v_four
						  : BLANK= b_val_cur, PEN=2);
						  
	id_radius_curve := GLOBAL_REF(#6);

						  
!   Total arc length for the rectangle corner curve
	arcl_tot := ARCL(#31);
	
!   Current arclength for the output values
	arcl_current := rel_arclength*arcl_tot;

!   Curve parameter corresponding to the current arc length
	cur_t := INV_ARCL(#31, arcl_current);
	
!   Points for the calculation of the rectangle length and rotation
	poi_line_start := ON(#31, cur_t);
	
	poi_line_end   := ON(#32, cur_t);
	
!   Output lengths (for set_profile = 1 ...)
	width_rectangle := VECL(poi_line_start - poi_line_end);
	
	height_rectangle := width_rectangle;
	
!   Output rectangle rotation
	rotation_angle := ANGLE(poi_line_end.x - poi_line_start.x,  poi_line_end.y - poi_line_start.y);

							  
    IF set_profile = 1 OR set_profile = 2 OR set_profile = 3 THEN
	
!       Calculate the output fillet radius 
        PART(#7, eval_data(GLOBAL_REF(#6), rel_arclength, value_curve));
		
!       Set the ouput fillet radius value
		fillet_radius := value_curve;
		
!       Adjust output values for the start part
	    PART(#9, rectangle_adjust(rel_arclength, min_radius, min_length, id_upper_curve, id_lower_curve,
	                          id_radius_curve, width_rectangle, fillet_radius,
							  width_adjusted, fillet_adjusted, 2));
		
		width_rectangle := width_adjusted;
		
		height_rectangle := width_rectangle;
		
		fillet_radius := fillet_adjusted;
		
    ELSE
        EXIT("rectangle_data Unvalid set_profile= " + STR(set_profile, -1, 0) + " (2)");  
    ENDIF;	
	
!   Debug geometry
!   ---------------

    IF debug_flag = 1 THEN	
	
!       Create the rectangle left lower corner curve 
	    TCOPY(#4, #3, #2, 1 :  BLANK= 1, PEN=2);
	
!       Create the rectangle left upper corner curve 
	    TCOPY(#5, #4, #2, 1 :  BLANK= 1, PEN=2);
	
!       Scale for screen correction (only for test/debug)	
	    TCOPY(#33, #4, #30, 1 :  BLANK= b_val_cur, PEN=4);
	    TCOPY(#34, #5, #30, 1 :  BLANK= b_val_cur, PEN=4);
		
		LIN_FREE(#11, VEC(0.0, 0.0, 0.0), VEC(half_square,    0.0,      0.0) :  BLANK= b_val_lin);
		LIN_FREE(#12, VEC(0.0, 0.0, 0.0), 
					  VEC(    0.0,       half_square*pixel_scale, 0.0) :  BLANK= b_val_lin);
		LIN_FREE(#16, VEC(-half_square, half_square*pixel_scale, 0.0), 
					  VEC( half_square, half_square*pixel_scale, 0.0) :  BLANK= b_val_lin);
		LIN_FREE(#20, VEC(-half_square,-half_square*pixel_scale, 0.0), 
					  VEC( half_square,-half_square*pixel_scale, 0.0) :  BLANK= b_val_lin);
		LIN_FREE(#21, VEC(-half_square,-half_square*pixel_scale, 0.0), 
					  VEC(-half_square, half_square*pixel_scale, 0.0) :  BLANK= b_val_lin);
		LIN_FREE(#22, VEC( half_square,-half_square*pixel_scale, 0.0), 
					  VEC( half_square, half_square*pixel_scale, 0.0) :  BLANK= b_val_lin);
					  
	    tang_start := TANG(#31, cur_t);
	
	    norm_start := VECN(VPROD(tang_start, VEC(0.0, 0.0, 1.0)));
	
	    LIN_FREE(#13, poi_line_start, poi_line_end :  BLANK= b_val_lin);
		
	    LIN_FREE(#14, VEC(0.0, 0.0, 0.0), 100.0*norm_start :  BLANK= b_val_lin);
	
        LIN_FREE(#15, poi_line_start, poi_line_start + 100.0*norm_start :  BLANK= b_val_lin);
		
	    poi_line_start := ON(#32, cur_t);
    	poi_line_end   := ON(#33, cur_t);
	    LIN_FREE(#17, poi_line_start, poi_line_end :  BLANK= b_val_lin);
	    poi_line_start := ON(#33, cur_t);
	    poi_line_end   := ON(#34, cur_t);
	    LIN_FREE(#18, poi_line_start, poi_line_end :  BLANK= b_val_lin);
	    poi_line_start := ON(#34, cur_t);
	    poi_line_end   := ON(#31, cur_t);
	    LIN_FREE(#19, poi_line_start, poi_line_end :  BLANK= b_val_lin);
	
	ENDIF;
				  
						  
	
    IF debug_flag = 1 THEN
		OPEN(f_d, "W", file_name);
		
		OUTSTR(f_d, "Debug rectangle_data.MBS");
		OUTLIN(f_d);
		
		    OUTSTR(f_d, "rel_arclength     " + STR(rel_arclength, 12, 6));
		    OUTLIN(f_d);
		    OUTSTR(f_d, "width_rectangle   " + STR(width_rectangle, 12, 6));
		    OUTLIN(f_d);	
		    OUTSTR(f_d, "height_rectangle  " + STR(height_rectangle, 12, 6));
		    OUTLIN(f_d);	
		
		    OUTSTR(f_d, "fillet_radius     " + STR(fillet_radius, 12, 6));
		    OUTLIN(f_d);
		    OUTSTR(f_d, "rotation_angle  " + STR(rotation_angle, 12, 6));
		    OUTLIN(f_d);
		
		    OUTSTR(f_d, "n_pts_approx      " + STR(n_pts_approx, 12, 0));
		    OUTLIN(f_d);		
		
		CLOSE(f_d);
	ENDIF;
	
ENDMODULE














