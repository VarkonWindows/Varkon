!**************** su_invon   ***************************
!s+++
! INV_ON_SUR
! __________
!
! Funktionen INV_ON_SUR ber{knar U,V v{rdet f|r den punkt som ligger
! n{rmast p} ytan till en "yttre" punkt. Denna funktion skapar en punkt 
! f|r detta U,V v{rde.
!
! Om ett startpunkt f|r ber{kningen ges som indata kommer s|kandet
! efter l|sningar begr{nsas. F|rst s|ker funktionen bara i den
! "patch" d{r startpunkten finns. Om det finns en n{rmaste punkt
! i denna "patch" avbryts ber{kningen. Om ingen punkt finns d{r 
! forts{tter letandet i "tv} lager" omgivande "patches". Hela
! ytan s|ks allts} aldrig igenom om en start punkt ges (om inte
! ytan {r liten ..).
!
! Detta {r en ganska tung (l}ngsam) ber{kning (i alla fall om
! ingen startpunkt ges). Att f|rst ta reda p} hur m}nga l|sningar
! som finns med N_INV_ON_SUR (finns {nnu inte som MBS sats) skulle
! i m}nga fall ta oacceptabelt l}ng tid (N_INV_ON_SUR ber{kningen
! {r identisk med INV_ON_SUR). D{rf|r finns m|jligheten att g|ra
! INV_ON_SUR ber{kningen utan att exekveringen av MBS programmet
! stoppas om l|sning saknas. Det enda som d} h{nder {r att tredje
! komponenten i utdata vektorn f}r ett negativt v{rde.
! 
! Modultyp: GEOMETRY
!
! Anrop: INV_ON_SUR (identitet,yta,ext_pt,kod,sno,uv_near : attribut)
!
! Obligatoriska parametrar:
!
! yta     (REF)    - Tidigare skapad yta
! ext_pt  (VECTOR) - Yttre punkt          
! kod     (INT)    - Kriterium f|r hur n{rmaste punkterna
!                    ska sorteras
!                    = 1: Sortera efter kortaste R*3 
!                         avst}nd till givna punkten
!                    = 2: Sortera efter kortaste U,V 
!                         avst}nd till givna U,V 
!                         startpunkten (uv_near)
!                    = kod (enligt ovan) + 1000:
!                    MBS programmet stoppar ej om
!                    l|sning saknas.
! sno     (INT)    - \nskad l|sning nummer
!
! Optionell parameter:  
!
! uv_near (VECTOR) - Start U,V punkt f|r ber{kningen
!
! Attribut: PEN, LEVEL, BLANK, ??                
!
! Exempel:
! 
! INV_ON_SUR (#5 , VEC(4000.0,100.0,3500.0) , 1 , 1 );
! 
! Ber{knar U,V v{rdet f|r den punkt p} ytan #5 som {r n{rmast
! punkten VEC(4000.0,100.0,3500.0). Ingen startpunkt har givits 
! och funktionen kommer att leta efter l|sningar p} hela ytan.
!s---
!e+++
! INV_ON_SUR
! __________
!
! The function INV_ON_SUR calculates the U,V value for the point on
! a surface which is closest to an external point. This function 
! creates the closest point (with the POI_FREE statement).
!
! If a start point is given as input to the calculation will the
! function limit the search area. The function will first only try 
! to find the solution in the give
! .......
!
! The third (z) component of the output vector (U,V point) will be
! negative if the calculation fails.
!
! Module type: GEOMETRY
!
! MBS syntax: INV_ON_SUR (identity, surf, ext_pt, code, sno, uv_near : attribute)
!
! Parameters:
!
! surf    (REF)    - Previously defined surface
! ext_pt  (VECTOR) - External point       
! kod     (INT)    - Criterion for the ordering of solution points
! sno     (INT)    - Requested solution number
!
! Optional parameter:  
!
! uv_near (VECTOR) - Start U,V point for the calculation
!
! Attribute: PEN, LEVEL, BLANK, ??
!
! Example:
! 
! INV_ON_SUR (#5 , VEC(4000.0,100.0,3500.0) , 1 , 1 );
! 
! Calculates the U,V value for the point on surfacce #5 which is 
! closest to the external point VEC(4000.0,100.0,3500.0). 
! No start point is given. The function will search for solutions
! in the whole surface.
!e---

!sdesce Add INV_ON_SUR statement to active module (calculate closest pt)
!sdescs Addera INV_ON_SUR sats till aktiva modulen (ber{kna n{rmaste pkt)    

! Revision history
! ________________
!
! 1994-06-25 Gunnar Liden
! 1994-10-08 Ordering of points, .... Gunnar Liden
! 1995-05-16 short description added  Gunnar Liden
! 1996-03-23 ma_invons->su_invon      Gunnar Liden
! 1996-05-18 Pos_men and curve added  Gunnar Liden
! 1996-05-27 blank->v_blank           Gunnar Liden

MACRO MODULE su_invon ();

! Internal variables:

  CONSTANT INT language= 2;      ! 1: English Eq. 2: Swedish
  STRING pos_men*1;              ! Position menu alternative (p or a)

  STRING select*80;              ! Select prompt string
  REF    s_id;                   ! Surface identity
  STRING s_ids*132;              ! Surface identity as string
  REF    c_id;                   ! Curve   identity
  STRING c_ids*132;              ! Curve   identity as string

  STRING sexpt*80;               ! External point as string
  STRING sexptx*25;              ! External point X component as string
  STRING sexpty*25;              ! External point Y component as string
  STRING sexptz*25;              ! External point Z component as string

  STRING snear*80;               ! Start point as string
  STRING snearu*25;              ! Start point X component as string
  STRING snearv*25;              ! Start point Y component as string

  STRING scode*25;               ! Code as string

  STRING ssoln*25;               ! Solution number as string

  STRING s_invon*132;            ! INV_ON_SUR statement as string

  REF    p_id;                   ! Point   identity
  STRING p_ids*132;              ! Point   identity as string
  STRING p_expt*80;              ! External point  prompt string

  STRING p_exptx*50;             ! External X  prompt string
  STRING p_expty*50;             ! External Y  prompt string
  STRING p_exptz*50;             ! External Z  prompt string

  STRING p_code*80;              ! Code as prompt string

  STRING p_soln*80;              ! Solution number as prompt string

  STRING p_nearu*80;             ! Start U  prompt string
  STRING p_nearv*80;             ! Start V  prompt string
  STRING p_near*80;              ! Start pt prompt string

                                 ! For function GETHDR:
  INT    typ;                    ! Type of entity
  INT    nref;                   ! ...
  INT    v_blank;                ! Eq. 0: Unblanked Eq. 1: Blanked
  INT    niva;                   ! The layer for the entity
  INT    penna;                  ! Pen number (colour)
  REF    grupp_id(3);            ! Global identities for groups

  REF    a_id;                   ! ADD_MBS identity

BEGINMODULE 

!e+++
! Algorithm
! _________
!e---
!s+++
! Algoritm
! ________
!s---

!e+++
! Initialization of internal variables
!e---
!s+++
! Initiering av interna variabler     
!s---

  pos_men :="p";             ! Position menu alternative (p or a)


  s_id  := #0;
  s_ids := "Undefined";
  p_id  := #0;
  p_ids := "Undefined";
  c_id  := #0;
  c_ids := "Undefined";

  sexpt  := "Undefined";  
  sexptx := "Undefined"; 
  sexpty := "Undefined";
  sexptz := "Undefined";

  snear  := "Undefined";    
  snearu := "Undefined";  
  snearv := "Undefined"; 

  scode   := "Undefined";  
  ssoln   := "Undefined";   
  s_invon := "Undefined"; 

!e+++
! Definition of prompt strings
!e---
!s+++
! Definition av prompt str{ngar
!s---

IF   language = 1 THEN           ! English 
  select:= "Select surface or curve";     !
  p_expt :="Select point";       !
  p_exptx:="External point " +   !
       "X component";            !
  p_expty:="External point " +   !
       "Y component";            !
  p_exptz:="External point " +   !
       "Z component";            !
  p_code :="Ordering case " +    !
   "1= w.r.t input point 2= UV"; !
  p_soln :="Requested " +        !
       "solution number";        !
  p_nearu:="Start U pt" +        !
       " <CR>= no start point";  !
  p_nearv:="Start V pt" +        !
       " ";                      !
ELIF language = 2 THEN           ! Swedish
  select:= "Peka p} yta eller kurva";        !
  p_expt :="Peka p} punkt";      !
  p_exptx:="Yttre punkt " +      !
       "X komponent";            !
  p_expty:="Yttre punkt " +      !
       "Y komponent";            !
  p_exptz:="Yttre punkt " +      !
       "Z komponent";            !
  p_code :="Sorterings fall " +  !
   "1= Avst}nd till inmatad "+   !
   "punkt 2= UV";                !
  p_soln :="\nskad " +           !
       "l|sning nummer";         !
  p_nearu:="Start U pkt" +       !
    " <CR>= ingen start punkt";  !
  p_nearv:="Start V pkt" +       !
       " ";                      !
ELSE                             !
  EXIT("su_invon : " +           !
  "Language error");             !
ENDIF;                           !

!e+++
! Interactive input of surface or curve reference (# identity)
!e---
!s+++
! Interaktiv inmatning av yt eller kurv referens (# identitet)
!s---

PSH_PMT(select);                 ! Select string to screen
s_id:= IDENT(30);                ! Interactive surface selection
POP_PMT();                       ! Erase message to screen

s_ids:= RSTR(s_id);              ! Surface identity as string
IF s_ids  = "#0.1" THEN          !
  EXIT();                        !
ENDIF;                           !

!e+++
! Get type of entity
!e---
!s+++
! H{mta typ av storhet       
!s---

  GETHDR( s_id,typ,nref, v_blank,niva,penna,grupp_id); 
  IF   typ = 16  THEN
    c_id  := #0;
    c_ids := "";
    s_ids :="GLOBAL_REF("+s_ids+")";
  ELIF typ =  8  OR  typ =  4  OR  typ =  2  THEN
    c_id  := s_id;
    c_ids := s_ids;
    c_ids :="GLOBAL_REF("+c_ids+")";
    s_id  := #0;
    s_ids := "";
  ELSE
    EXIT("su_invon Program error typ");
  ENDIF;

!e+++
! Interactive input of external point reference (# identity) 
!e---
!s+++
! Interaktiv inmatning av punkt referens (# identitet)
!s---

IF     pos_men = "a" THEN        ! Position menu: Coordinates   
sexptx:= INPMT(p_exptx,"",25);   ! Interactive input of X component
IF sexptx = "" THEN              !
  EXIT();                        !
ENDIF;                           !
sexpty:= INPMT(p_expty,"",25);   ! Interactive input of Y component
IF sexpty = "" THEN              !
  EXIT();                        !
ENDIF;                           !
sexptz:= INPMT(p_exptz,"",25);   ! Interactive input of Z component
IF sexptz = "" THEN              !
  EXIT();                        !
ENDIF;                           !

sexpt:="VEC("+sexptx+","         ! External point       
             +sexpty+","         !
             +sexptz+")";        !
ELIF   pos_men = "p" THEN        ! Position menu: Select point 
PSH_PMT(p_expt);                 ! Select string to screen
p_id:= IDENT(1);                 ! Interactive point selection
POP_PMT();                       ! Erase message to screen
p_ids:= RSTR(p_id);              ! Point identity as string
IF p_ids  = "#0.1" THEN          !
  EXIT();                        !
ENDIF;                           !
p_ids:="GLOBAL_REF("+p_ids+")";  ! Add GLOBAL_REF
p_ids:="ON("+p_ids+")";          ! Add ON
ELSE                             !
  EXIT("su_invon : " +           !
  "pos_men  error");             !
ENDIF;                           !

!e+++
! Interactive input of ordering case
!e---
!s+++
! Interaktiv inmatning av sorteringsordning f|r l|sningarna
!s---

IF  s_id <> #0  THEN             ! Only for surface
scode := INPMT(p_code ,"1",25);  ! Interactive input of code
IF scode  = "" THEN              !
  EXIT();                        !
ENDIF;                           !
ENDIF;                           !

!e+++
! Interactive input of requested solution
!e---
!s+++
! Interaktiv inmatning av |nskad l|sning
!s---

ssoln := INPMT(p_soln ,"1",25);  ! Interactive input of solution no
IF ssoln  = "" THEN              !
  EXIT();                        !
ENDIF;                           !

!e+++
! Interactive input of start UV point
!e---
!s+++
! Interaktiv inmatning av start UV punkt
!s---

IF  c_id  <>  #0  THEN           ! Start point only for surface
  GOTO  nostart;                 !
ENDIF;                           !

snearu:= INPMT(p_nearu,"",25);   ! Interactive input of U component
IF snearu = "" THEN              !
  snearv := "";                  !
  snear  := "";                  !
  GOTO nostart;                  !
ENDIF;                           !
snearv:= INPMT(p_nearv,"",25);   ! Interactive input of V component
IF snearv = "" THEN              !
  EXIT();                        !
ENDIF;                           !

snear:="VEC("+snearu+","         ! UV start point       
             +snearv+")";        !

nostart:;                        ! Label: No start point

!e+++
! Define whole string for the INV_ON_SUR or INV_ON statement  
!e---
!s+++
! Definiera str{ng f|r hela INV_ON_SUR or INV_ON satsen     
!s---

IF   c_id   <>  #0  THEN
  s_invon:=  "INV_ON("+c_ids+
  "," +p_ids + ","+ssoln+")";                   
  s_invon:= "ON(" + c_ids  + "," + s_invon+")"; 
  GOTO  curve;
ENDIF;

IF     snear = "" AND pos_men = "a" THEN              
 s_invon:=  "INV_ON_SUR("+s_ids+
 "," + sexpt+ ","+scode+","+   
 ssoln+")";                   
ELIF   snear = "" AND pos_men = "p" THEN              
 s_invon:=  "INV_ON_SUR("+s_ids+
 "," +p_ids + ","+scode+","+   
 ssoln+")";                   
ELIF   snear <> "" AND pos_men = "p" THEN              
 s_invon:=  "INV_ON_SUR("+s_ids+
 "," +p_ids + ","+scode+","+ 
 ssoln+","+snear+")";       
ELIF   snear <> "" AND pos_men = "a" THEN              
 s_invon:=  "INV_ON_SUR("+s_ids+
 "," + sexpt+ ","+scode+","+ 
 ssoln+","+snear+")";       
ELSE
  EXIT("su_invon: String creation error"); 
ENDIF;                     

s_invon:= "ON(" + s_ids  + "," + s_invon+")"; 

curve:;      ! Label: Curve

!e+++
! Add MBS statement to the active module
!e---
!s+++
! L{gg till MBS sats i den aktiva modulen
!s---

a_id:= ADD_MBS("POI_FREE", s_invon); 

ENDMODULE 

