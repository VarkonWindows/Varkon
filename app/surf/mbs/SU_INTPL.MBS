! ***************** su_intpl   ****************************
!
!s+++
! Sk{rning med planknippe i den valda ytan, i alla ytor i den valda
! parten eller i alla (icke-blankade) ytor i hela GM.
!
! Kurvorna "registreras" genom att en grupp per kurvsk{rningsgren
! skapas. Namnet p} gruppen (GROUP) {r stationsv{rdet.
!
! Maximalt antal sk{rningsplan {r 100 och maximalt antal ytor 200
!s---
!e+++
! Make planar intersects in one surface, all surfaces in 
! the input part or all (non-blanked) surfaces in GM
!
! The curves will be "registered" as GROUP's with names which
! are the station value
!
! Maximum number of planes is 100 and maximum number of surfaces.
!e---
!************************************************************

! Revision history
! ________________
!
! 1996-03-02 Gunnar Liden
! 1996-11-18 No intersect for FAC_SUR Gunnar Liden


!sdesce Make planar intersects in one surface, in one part or all   
!sdescs Plana X, Y eller Z snitt i en yta, alla i en part eller alla


GLOBAL GEOMETRY MODULE su_intpl   (

REF    c_id   := #0    > "@ @t8192 Select coordinate system <CR>= #0= global system";
REF    in_id  := #0    > "@ @t16400 Surface (use y), in part (use P) or <CR>= #0= all";
STRING stat*1 := "Y"   > "Station X, Y or Z ";
FLOAT  start  :=-200.0 > "Start station value";
FLOAT  delta  :=  50.0 > "Delta station value (0.0 = only one plane)";
FLOAT  end    := 100.0 > "End   station value";
INT    graphic:=   1   > "Graphics 1: Show curves 0: Blank curves");


! Internal variables

  CONSTANT INT language= 2;      ! 1: English Eq. 2: Swedish

  STRING ermess1*60;             ! Error Graphic not OK
  STRING ermess2*60;             ! Error Number of intersect planes
  STRING ermess3*60;             ! Error Station case
  STRING ermess4*60;             ! Error Entity type 
  STRING ermess5*60;             ! Error Maximum number of iterations
  STRING ermess6*60;             ! Error Change sign on delta
  STRING ermess7*60;             ! Error Input surface is blanked
  STRING ermess8*60;             ! Error No surface in input part
  STRING ermess9*60;             ! Error No surface in GM
  STRING ermess10*60;            ! Error No intersect curves created

  INT    n_plane;                ! Number of  intersect planes
  INT    i_plane;                ! Loop index intersect plane
  INT    n_inter;                ! Total number of intersect curves 

  VECTOR i_norm;                 ! Intersect plane normal
  VECTOR p1_s;                   ! Point 1 for start   B-plane
  VECTOR p2_s;                   ! Point 2 for start   B-plane
  VECTOR p3_s;                   ! Point 3 for start   B-plane
  VECTOR p4_s;                   ! Point 4 for start   B-plane

  STRING cur_name*20;            ! Curve (GROUP) name

                                 ! For function GETHDR:
  INT    typ;                    ! Type of entity
  INT    nref;                   ! ...
  INT    blank;                  ! Eq. 0: Unblanked Eq. 1: Blanked
  INT    niva;                   ! The layer for the entity
  INT    penna;                  ! Pen number (colour)
  REF    grupp_id(3);            ! Global identities for groups

  STRING s_case*1;               ! Surface scanning case

  REF    s_id;                   ! Current surface

  INT    sur_type;               ! Surface type

                                 ! For GET_NEXT_GM:
  INT    tmod;                   ! 0: All entities 1: Only parts

                                 ! For GETCSY:
  STRING csys_name*10;           ! Name of coordinate system
  FLOAT  csys_data(4,4);         ! Transformation matrix

  INT    i_b;                    ! Loop index intersect branch

  INT    i_l;                    ! Loop index for U,V grid

  FLOAT  current;                ! Current station value

  INT    no_branch;              ! No branches

  INT    no_surf;                ! Number of surfaces

  INT    bflag_i;                ! Blank flag for intersects

  INT    DEBUG;                  ! For Debug printout

  STRING s*1;                    ! For INPMT

BEGINMODULE

!e+++
! Algorithm
! _________
!e---
!s+++
! Algoritm
! ________
!s---

!e+++
! 1. Initializations of internal variables and checks of input data
!e---
!s+++
! 1. Initieringar av interna variabler och kontroll av indata
!s---

  DEBUG := 0;                            ! Debug 0 or 1    

  IF  DEBUG = 1 THEN                     ! Open Debug window
  LST_INI("su_intpl Intersection between planes and surfaces");
  LST_LIN("Input in_id " + RSTR(in_id)+" Coord. system c_id "+RSTR(c_id)); 
  LST_LIN("Station stat " + stat +" graphic "+STR(graphic,-1,0)); 
  LST_LIN("start " + STR(start, 11,3)+
         " delta " + STR(delta, 11,3) +
         " end "   + STR(end  , 11,3)   ); 
  ENDIF;

!e+++
! Definition of error strings in English or Swedish
!e---
!s+++
! Definition av felmeddelanden p} engelska eller svenska
!s---

IF   language = 1 THEN   ! English error messages
  ermess1 := "Graphic intersect parameter not 0 or 1 (su_intpl)";     
  ermess2 := "Number of intersect planes > 100 (su_intpl)";
  ermess3 := "Intersect case (station) "+stat+" not X, Y or Z (su_intpl)";   
  ermess4 := "Entity type for intersect not part or surface (su_intpl)";   
  ermess5 := "Maximum number of interersect surfaces 200 exceed (su_intpl)";   
  ermess6 := "Change sign on delta for intersects (su_intpl)";   
  ermess7 := "Input intersect surface is blanked (su_intpl)";   
  ermess8 := "There is no intersect surface in the given part (su_intpl)";   
  ermess9 := "There is no (intersect) surface in GM (su_intpl)";   
  ermess10:= "No intersect curves are created (su_intpl)";   

ELIF language = 2 THEN   ! Swedish error messages
  ermess1 := "Grafikparameter f|r sk{rning ej 0 eller 1 (su_intpl)";     
  ermess2 := "Antalet sk{rningsplan > 100 (su_intpl)"; 
  ermess3 := "Sk{rningsfall (station) "+stat+" ej X, Y eller Z (su_intpl)";   
  ermess4 := "Typ av storhet f|r sk{rning ej part eller yta (su_intpl)";   
  ermess5 := "Maximalt antal ytor 200 f|r sk{rning |verskridet (su_intpl)";   
  ermess6 := "Byt tecken p} delta f|r sk{rningarna (su_intpl)";   
  ermess7 := "Indata ytan f|r sk{rningsber{kning {r blankad (su_intpl)";   
  ermess8 := "Det finns ingen sk{rningsyta i givna parten (su_intpl)";   
  ermess9 := "Det finns ingen (sk{rnings-) yta i GM (su_intpl)";   
  ermess10:= "Inga sk{rningskurvor har skapats (su_intpl)";   

ELSE                        
  IF  DEBUG = 1 THEN  
    LST_EXI();
  ENDIF;
  EXIT("su_intpl: Language error");
ENDIF;     

!e+++
! Input parameter graphic must be 0 or 1
!e---
!s+++
! Indata parametern graphic m}ste vara 0 eller 1
!s---

  IF   graphic = 0 THEN          ! 
    bflag_i := 1;                ! Blank intersects
  ELIF graphic = 1 THEN          ! 
    bflag_i := 0;                ! No blank of intersects
  ELSE                           !
    IF  DEBUG = 1 THEN  
      LST_EXI();
    ENDIF;
    EXIT(ermess1);               ! Error
  ENDIF;                         !

  IF DEBUG = 1 THEN              
    LST_LIN("Input in_id " + RSTR(in_id)); 
  ENDIF;

!e+++
! Calculate number of intersect planes
!e---
!s+++
! Ber{kning av antal sk{rningsplan
!s---

  IF       ABS(delta) <   0.00001 THEN
    n_plane := 1;
  ELIF         delta  >=  0.00001 AND end < start  THEN
    IF  DEBUG = 1 THEN  
      LST_EXI();
    ENDIF;
    EXIT(ermess6);
  ELIF         delta  <= -0.00001 AND end > start  THEN
    IF  DEBUG = 1 THEN  
      LST_EXI();
    ENDIF;
    EXIT(ermess6);
  ELSE
    n_plane := TRUNC((ABS(start-end)+0.0000001)/ABS(delta));
  ENDIF;

  IF  n_plane > 100 THEN         ! Check no of planes
    IF  DEBUG = 1 THEN  
      LST_EXI();
    ENDIF;
    EXIT(ermess2); 
  ENDIF;

!e+++
! Input parameter stat must be x, X, y, Y, z or Z
! Definition of the intersect plane normal for the given case
! and four points for the start intersect B-plane
!e---
!s+++
! Indata parametern stat m}ste vara x, X, y, Y, z or Z
! Definition av sk{rningsplanets normal f|r det givna fallet
! och fyra punkter f|r startsk{rnings B-planet.
!s---

  IF    stat = "x"  OR stat = "X"  THEN
    stat   := "X";
    i_norm := VEC( 1.0,    0.0,   0.0);
    p1_s   := VEC(start,   0.0,   0.0 );
    p2_s   := VEC(start,1000.0,1000.0 );
    p3_s   := VEC(start,1000.0,1000.0 );
    p4_s   := VEC(start,2000.0,   0.0 );
  ELIF  stat = "y"  OR stat = "Y"  THEN
    stat   := "Y";
    i_norm := VEC(   0.0,  1.0,    0.0);
    p1_s   := VEC(   0.0, start,   0.0 );
    p2_s   := VEC(1000.0, start,1000.0 );
    p3_s   := VEC(1000.0, start,1000.0 );
    p4_s   := VEC(2000.0, start,   0.0 );
  ELIF  stat = "z"  OR stat = "Z"  THEN
    stat   := "Z";
    i_norm := VEC(   0.0,    0.0,  1.0);
    p1_s   := VEC(   0.0,    0.0, start);
    p2_s   := VEC(1000.0, 1000.0, start);
    p3_s   := VEC(1000.0, 1000.0, start);
    p4_s   := VEC(2000.0,    0.0, start);
  ELSE
    IF  DEBUG = 1 THEN  
      LST_EXI();
    ENDIF;
    EXIT(ermess3); 
  ENDIF;

!e+++
! Get name of input coordinate system
!e---
!s+++
! H{mta namn p} indata koordinatsystemet
!s---

  IF  c_id = #0  THEN
    csys_name:= "GLOBAL";    
  ELSE
    GETCSY(c_id, csys_name, csys_data);     
  ENDIF;

  IF  DEBUG = 1 THEN   
  LST_LIN("p1_s "+STR(p1_s.x,11,3)+" "+STR(p1_s.y,11,3)+" "+STR(p1_s.z,11,3)); 
  LST_LIN("p2_s "+STR(p2_s.x,11,3)+" "+STR(p2_s.y,11,3)+" "+STR(p2_s.z,11,3)); 
  LST_LIN("p3_s "+STR(p3_s.x,11,3)+" "+STR(p3_s.y,11,3)+" "+STR(p3_s.z,11,3)); 
  LST_LIN("p4_s "+STR(p4_s.x,11,3)+" "+STR(p4_s.y,11,3)+" "+STR(p4_s.z,11,3)); 
  LST_LIN("p4_s "+STR(p4_s.x,11,3)+" "+STR(p4_s.y,11,3)+" "+STR(p4_s.z,11,3)); 
  LST_LIN("Name of coordinate system csys_name " + csys_name ); 
  LST_LIN("Number of intersect planes n_plane "+STR(n_plane, 5,0)); 
  ENDIF;

!e+++
! 2. Determine surface case and initialize GM scanning parameters
!e---
!s+++
! 2. Best{m fall f|r s|kandet av ytor och initiera s|k parametrar
!s---

  IF     in_id = #0  THEN                     ! All surfaces in GM
    SET_ROOT_GM(in_id);
    s_case := "a";
  ELSE
    GETHDR( in_id,typ,nref,        
      blank,niva,penna,grupp_id); 
      IF    typ = 16384 THEN                  ! All surfaces in part
        SET_ROOT_GM(in_id);
        s_case := "p";
      ELIF  typ = 16    THEN                  ! One surface
        s_case := "s";
      ELSE
        IF  DEBUG = 1 THEN  
          LST_EXI();
        ENDIF;
        EXIT(ermess4);
      ENDIF;
  ENDIF;

  tmod := 0;                                  

  IF  DEBUG = 1 THEN   
  LST_LIN("s_case "+s_case); 
  ENDIF;

!e+++
! 3. Calculate intersects    
!e---
!s+++
! 3. Ber{kna sk{rningar      
!s---

  no_surf := 0;
  n_inter := 0;

!e+++
! Label nxtsur: Next surface in GM or in part
!e---
!s+++
! Label nxtsur: N{sta yta i GM eller i parten
!s---

nxtsur:;

  no_surf := no_surf + 1;
  IF  no_surf > 200 THEN    
    IF  DEBUG = 1 THEN  
      LST_EXI();
    ENDIF;
    EXIT(ermess5);
  ENDIF;

!e+++
! Get next reference to current surface. Goto nxtsur if surface is blanked.
!e---
!s+++
! H{mta referens till n{sta yta. Hoppa till nxtsur om ytan {r blankad.
!s---

  IF   s_case = "s"  THEN
    s_id := in_id;
  ELSE
    s_id := GET_NEXT_GM (tmod,16);
    IF s_id =  #0 THEN
      POP_PMT(); 
      IF    no_surf = 1 AND s_case = "p" THEN
        IF  DEBUG = 1 THEN  
          LST_EXI();
        ENDIF;
        EXIT(ermess8);
      ELIF  no_surf = 1 AND s_case = "a" THEN
        IF  DEBUG = 1 THEN  
          LST_EXI();
        ENDIF;
        EXIT(ermess9);
      ENDIF;
      GOTO  nomore;
    ENDIF;
  ENDIF;

  GETHDR( s_id,typ,nref, blank,niva,penna,grupp_id); 
  GETSURH(s_id,"SUR_TYPE",sur_type);
  IF  blank = 1 OR  sur_type = 4 THEN  
    IF   s_case = "s" THEN
      IF  DEBUG = 1 THEN  
        LST_EXI();
      ENDIF;
      EXIT(ermess7);
    ENDIF;
    GOTO nxtsur;
  ENDIF;


!e+++
! Start of loop all station values: i_plane= 1, 2, 3, .... , n_plane
!e---
!s+++
! Start av loop alla stations v{rden: i_plane= 1, 2, 3, .... , n_plane
!s---

  FOR i_plane := 1 TO n_plane  DO  

!e+++
!   Create current intersect B-plane and name for curve GROUP
!e---
!s+++
!   Skapa aktuella sk{rnings B-planet och namnet p} kurve gruppen (GROUP)
!s---

    cur_name := stat+csys_name+"= "+STR(start+(i_plane-1)*delta,-10,2);
!   Message to screen 
    PSH_PMT("Station "+ stat + csys_name + "= " +  
     STR(start+(i_plane-1)*delta,-15,8)+
     "    Surface "+RSTR(s_id)); 

    IF    c_id  <>  #0  THEN
      MODE_LOCAL(c_id);
    ENDIF;
    B_PLANE( #3, p1_s + (i_plane-1)*delta*i_norm,  
                 p2_s + (i_plane-1)*delta*i_norm,  
                 p3_s + (i_plane-1)*delta*i_norm,  
                 p4_s + (i_plane-1)*delta*i_norm  :BLANK=0);
    IF  DEBUG = 2 THEN
      POI_FREE(#4,  p1_s + (i_plane-1)*delta*i_norm :PEN=2);
      POI_FREE(#5,  p2_s + (i_plane-1)*delta*i_norm :PEN=2);
      POI_FREE(#6,  p4_s + (i_plane-1)*delta*i_norm :PEN=2);
    ENDIF;
    MODE_GLOBAL();

!Q    s:= INPMT("su_intpl Continue y/n ","n",1);
!Q    IF  s = "n" THEN
!Q      GOTO  nomore;
!Q    ENDIF;


!e+++
!   Calculate number of intersect branches in the current surface
!   Goto label nointer if there is no intersect.
!e---
!s+++
!   Ber{kna antal sk{rningsgrenar i aktuella ytan.
!   Hoppa till label nointer om ingen sk{rning finns
!s---

    no_branch := N_CUR_INT( s_id, GLOBAL_REF(#3) ); 

    IF  DEBUG = 1 THEN   
    LST_LIN("Station "+STR(start+(i_plane-1)*delta,11,3)+" Surface "+RSTR(s_id)); 
    LST_LIN("Number of intersect branches no_branch "+STR(no_branch, 4,0)); 
    ENDIF;

    IF no_branch = 0 THEN 
        DEL(GLOBAL_REF(#3));         
        GOTO nointer;   
    ENDIF;             

!e+++
!   Create all intersect curve branches
!e---
!s+++
!   Skapa alla sk{rningsgrenar 
!s---

    FOR i_b:= 1 TO no_branch DO  ! Start loop branches  

      n_inter := n_inter + 1;    ! An additional curve
      CUR_INT(#1,s_id, GLOBAL_REF(#3), i_b :BLANK=bflag_i);
      IF i_b = no_branch THEN 
        DEL(GLOBAL_REF(#3));   
      ENDIF;      

      GROUP( #2, cur_name, GLOBAL_REF(REFC(1,n_inter)));

    ENDFOR;                      ! End   loop branches   

nointer:;                        ! Label: No intersect 

    POP_PMT();                   ! Erase message to screen

  ENDFOR;                        ! End   loop intersects

!e+++
! End   of loop all station values: i_plane= 1, 2, 3, .... , n_plane
!
!e---
!s+++
! Slut p} loop alla stations v{rden: i_plane= 1, 2, 3, .... , n_plane
!
!s---

!e+++
! Goto nomore if case is only one surface. Goto nxtsur for other cases
!e---
!s+++
! Hoppa till nomore f|r fallet bara en yta. Hoppa till nxtsur annars
!s---

  IF   s_case = "s"  THEN
    GOTO  nomore;
  ELSE
    GOTO  nxtsur;
  ENDIF;

!e+++
! Label nomore: End of intersect calculation 
!e---
!s+++
! Label nomore: Slut p} sk{rningsber{kningen 
!s---

nomore:;                                 ! Label: End of calculation

  IF  DEBUG = 1 THEN                     ! Close Debug window
    LST_LIN("Total number of intersect curves n_inter "+STR(n_inter, 5,0)); 
    LST_EXI();
  ENDIF;

  IF  n_inter = 0 THEN                   ! Check no of intersect curves
    EXIT(ermess10);
  ENDIF;

ENDMODULE
