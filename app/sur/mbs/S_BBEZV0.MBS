! ***************** s_bbezv0   ****************************
!
! +++
! Creates a Bezier polygon points for a rational cubic curve
!
! There is an option to registrate the Bezier polygon point
! as a part, by inputting a name of the part and writing a
! module with the same name. The parameters for this module
! shall be:
!
! 1. Bezier polygon point   (VECTOR)
! 2. Weight for the point   (FLOAT)
! 3. Point number (0,1,2,3) (INT)
! 4. Segment number         (INT)
!
! There is an existing module s_rcbez
! ---
!
! Revision history
! ________________
!
! 1997-11-19 Gunnar Liden
!  
!************************************************************

!sdesce Bezier polygon points for a rational cubic segment  
!sdescs Bezier polygon f=F6r ett rationellt kubiskt segment


GLOBAL GEOMETRY MODULE s_bbezv0   (

REF    cur_id         > "@t8 Select curve";
INT    i_seg   :=   5  > "Segment address";
STRING reg_name*10 :=  "s_rcbez" >"Registrate as part";
INT    graphic :=   1  > "= 0: Nothing = 1: Points");

!  Reference: Faux & Pratt p 131
!
!                               ! r0 !
!                               ! r1 !
!  r(u) =  (1 u u**2 u**3) * M * !    !       Bezier
!                               ! r2 !
!                               ! r3 !
!
!
!                                       
!                                      
!  r(u) =  (1 u u**2 u**3) * A                Coefficients
!                                       
!        ! c0 !           ! r0 !
!        ! c1 !           ! r1 !         
!  A  =   !    !  =   M  *  !    !
!        ! c2 !           ! r2 !
!        ! c3 !           ! r3 !
!
!                                       
!        ! c0 !                ! r0 !
!   -1   ! c1 !      -1        ! r1 !         
!  M  *  !    !  =   M  * M  *  !    !
!        ! c2 !                ! r2 !
!        ! c3 !                ! r3 !
!
!                                       
!        ! r0 !           ! c0 !
!        ! r1 !      -1   ! c1 !         
!        !    !  =   M  *  !    !
!        ! r2 !           ! c2 !
!        ! r3 !           ! c3 !
!
!
!
! Invertation of a matrix (Varkon module matrixiv0) 1997-02-16
!  
! Reference: Faux & Pratt p 136-137
!  
! Input  matrix M (determinant=       9.00000000) :                     =
              
!      1.00000000      0.00000000      0.00000000      0.00000000        =
          
!     -3.00000000      3.00000000      0.00000000      0.00000000        =
          
!      3.00000000     -6.00000000      3.00000000      0.00000000        =
          
!     -1.00000000      3.00000000     -3.00000000      1.00000000        =
          
! Output matrix invM:                                                    =
               
!      1.00000000     -0.00000000      0.00000000     -0.00000000        =
          
!      1.00000000      0.33333333     -0.00000000      0.00000000        =
          
!      1.00000000      0.66666667      0.33333333     -0.00000000        =
          
!      1.00000000      1.00000000      1.00000000      1.00000000        =
          
!  
! r0  =   c0
! r1  =   c0 + 1/3*c1   
! r2  =   c0 + 2/3*c1 + 1/3*c2
! r3  =   c0 +     c1 +     c2  + c3
!  

! Internal variables

                                 ! For GETCURH:
  INT    ns_geo;                 ! No of geometrical segments
  INT    ns_gra;                 ! No of graphical   segments
  INT    fnt;                    ! Font type, subtype
  FLOAT  sl;                     ! Dash length  

                                 ! For GETSEG:
  INT    reptype;                ! Requested type (curve):
                                 ! Eq. 0: Geometry
                                 ! Eq. 1: Graphic
  FLOAT  segdat(4,4);            ! Segment coefficients
  FLOAT  c_offset;               ! Curve offset
  INT    type;                   ! Curve segment type
                                 ! Eq. 1: A  R*3 (free)    segment
                                 ! Eq. 2: An U,V (surface) segment
  INT    subtype;                ! Curve segment subtype
                                 ! Eq. 0:
                                 ! Eq. 1:
                                 ! Eq. 2:
  REF    sur1_id;                ! Reference to surface 1
  REF    sur2_id;                ! Reference to surface 2

  VECTOR r0;                     ! Bezier polygon point 1
  FLOAT  r0_w;                   ! Weight for r0
  VECTOR r1;                     ! Bezier polygon point 2
  FLOAT  r1_w;                   ! Weight for r1
  VECTOR r2;                     ! Bezier polygon point 3
  FLOAT  r2_w;                   ! Weight for r2
  VECTOR r3;                     ! Bezier polygon point 4
  FLOAT  r3_w;                   ! Weight for r3

  STRING str_seg*10;             ! Segment number as string

  INT    b_val_p;                ! Blank flag for p

  INT    DEBUG;                  ! For Debug printout

  STRING s*1;                    ! For INPMT

BEGINMODULE

! +++
! Algorithm
! = = = = = = = = = 
!
! 1. Initializations and checks       
! ---

  DEBUG :=  0;

  IF   graphic =  0 THEN
    b_val_p :=  1;
  ELIF graphic =  1 THEN
    b_val_p :=  0;
  ELSE
    EXIT("s_bbezv0  graphic");
  ENDIF;

! +++
! 2. Retrieve curve data
!
! Retrieve number of segments. Call GETCURH.
! ---

! Get number of segments  
  GETCURH(cur_id, fnt,sl,ns_geo,ns_gra);  


  IF DEBUG =  2 THEN  
   s:=  INPMT("s_bbezv0   "   +
    " ns_geo "+STR(ns_geo,-1,0), "",1);
  ENDIF;

  IF  i_seg <  1 THEN
    EXIT("s_bbezv0  i_seg <  1");
  ENDIF;
  IF  i_seg >  ns_geo THEN
    EXIT("s_bbezv0  i_seg > ns_geo=  "+STR(ns_geo,-1,0));
  ENDIF;

! +++
! 3. Retrieve curve segment data
!
! ---

    reptype:=  0;
    GETSEG( cur_id, i_seg, reptype,
        segdat,c_offset,type,
        subtype,sur1_id,sur2_id);  


! +++
! 4. Calculate the Bezier polygon  
! ---

! r0  =   c0
! r1  =   c0 + 1/3*c1   
! r2  =   c0 + 2/3*c1 + 1/3*c2
! r3  =   c0 +     c1 +     c2  + c3
!  
  r0.x :=  segdat(1,1);
  r0.y :=  segdat(1,2);
  r0.z :=  segdat(1,3);
  r0_w :=  segdat(1,4);

  r1.x :=  segdat(1,1) + 1.0/3.0*segdat(2,1);
  r1.y :=  segdat(1,2) + 1.0/3.0*segdat(2,2);
  r1.z :=  segdat(1,3) + 1.0/3.0*segdat(2,3);
  r1_w :=  segdat(1,4) + 1.0/3.0*segdat(2,4);

  r2.x :=  segdat(1,1) + 2.0/3.0*segdat(2,1) + 1.0/3.0*segdat(3,1);
  r2.y :=  segdat(1,2) + 2.0/3.0*segdat(2,2) + 1.0/3.0*segdat(3,2);
  r2.z :=  segdat(1,3) + 2.0/3.0*segdat(2,3) + 1.0/3.0*segdat(3,3);
  r2_w :=  segdat(1,4) + 2.0/3.0*segdat(2,4) + 1.0/3.0*segdat(3,4);

  r3.x :=  segdat(1,1) + segdat(2,1) + segdat(3,1) + segdat(4,1);
  r3.y :=  segdat(1,2) + segdat(2,2) + segdat(3,2) + segdat(4,2);
  r3.z :=  segdat(1,3) + segdat(2,3) + segdat(3,3) + segdat(4,3);
  r3_w :=  segdat(1,4) + segdat(2,4) + segdat(3,4) + segdat(4,4);


  IF  DEBUG =  1 THEN
  LST_INI("Debug from s_bbezv0");

  LST_LIN("Bezier polygon:");
  LST_LIN("r0 "+STR(r0.x,15,8)+" "+STR(r0.y,15,8)+" "+STR(r0.z,15,8));
  LST_LIN("r1 "+STR(r1.x,15,8)+" "+STR(r1.y,15,8)+" "+STR(r1.z,15,8));
  LST_LIN("r2 "+STR(r2.x,15,8)+" "+STR(r2.y,15,8)+" "+STR(r2.z,15,8));
  LST_LIN("r3 "+STR(r3.x,15,8)+" "+STR(r3.y,15,8)+" "+STR(r3.z,15,8));

  LST_EXI();
  ENDIF;


! +++
! 5. Create points                 
! ---

  POI_FREE(#1, r0 :BLANK= b_val_p);   
  POI_FREE(#2, r1 :BLANK= b_val_p);   
  POI_FREE(#3, r2 :BLANK= b_val_p);   
  POI_FREE(#4, r3 :BLANK= b_val_p);   

  str_seg :=  "_"+STR(i_seg,1,0);

  GROUP(#11, "r0"+str_seg, GLOBAL_REF(#1));
  GROUP(#12, "r1"+str_seg, GLOBAL_REF(#2));
  GROUP(#13, "r2"+str_seg, GLOBAL_REF(#3));
  GROUP(#14, "r3"+str_seg, GLOBAL_REF(#4));

! +++
! 6. Registrate the point if a name is defined
! ---

  PART(#5, reg_name, ( r0, r0_w, 0, i_seg ));
  PART(#6, reg_name, ( r1, r1_w, 1, i_seg ));
  PART(#7, reg_name, ( r2, r2_w, 2, i_seg ));
  PART(#8, reg_name, ( r3, r3_w, 3, i_seg ));

ENDMODULE
