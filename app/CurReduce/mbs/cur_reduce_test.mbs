!********************* cur_reduce ***********************
! +++
! Test curve for reduction
!
!
! ---
! Revision history
! ________________
!
! 2023-01-29  Gunnar Liden
! 
!*******************************************************

!sdesce Test curve for reduction

GLOBAL GEOMETRY MODULE cur_reduce_test();


! Internal variables:

VECTOR  cur_pts(97);
VECTOR  cur_tan(97);

INT pt_number;

! Data for set one (set_profile=1)
CONSTANT FLOAT  half_quadrat_1            = 400.0;
CONSTANT VECTOR vec_start_1               = VEC(-4.0, 20.0, 0.0);
CONSTANT FLOAT  p_value_1                 = 0.4;
CONSTANT VECTOR poi_start_1               = VEC(0.0, 0.0, 0.0);
CONSTANT VECTOR vec_end_1                 = VEC(10.0, 0.0, 0.0);



! Parameters for the rectangle corner curve
FLOAT  half_quadrat;                  ! Length half quadrat
VECTOR poi_start;                     ! Conic start point
VECTOR vec_start;                     ! Conic start vector
FLOAT  p_value;                       ! Conic P value
VECTOR poi_end;                       ! Conic end point
VECTOR vec_end;                       ! Conic end vector

CONSTANT FLOAT pixel_scale = 1.33;    ! Correction for screen 2560 X 1440
!CONSTANT FLOAT pixel_scale  = 1.00;    ! Do only scale here for test/debug

BEGINMODULE

PART(#91,saabvyer());

half_quadrat := half_quadrat_1;

poi_start := poi_start_1;
vec_start := vec_start_1;
p_value   := p_value_1;
poi_end   := VEC(half_quadrat, half_quadrat, 0.0);
vec_end   := vec_end_1;
!   Create the rectangle right upper corner curve 
	CUR_CONIC(#21, "FREE", poi_start, poi_start + vec_start, p_value,
	                      poi_end, poi_end + vec_end
						  :  BLANK= 1, PEN=2);
	
!   Create the rectangle right lower corner curve 
	TFORM_ROTP(#20, VEC(0.0, 0.0, 0.0), -90.0);
	TCOPY(#22, #21, #20, 1 :  BLANK= 1, PEN=2);
	TCOPY(#23, #22, #20, 1 :  BLANK= 1, PEN=2);
	TCOPY(#24, #23, #20, 1 :  BLANK= 1, PEN=2);
	
!   Scale for screen correction (only for test/debug)	
    TFORM_MOVE(#30, VEC(0.0, 0.0, 0.0), VEC(0.0, 0.0, 0.0), 1.0, pixel_scale, 1.0);
	TCOPY(#31, #21, #30, 1 :  BLANK= 0, PEN=4);
	TCOPY(#32, #22, #30, 1 :  BLANK= 0, PEN=4);
	TCOPY(#33, #23, #30, 1 :  BLANK= 0, PEN=4);
	TCOPY(#34, #24, #30, 1 :  BLANK= 0, PEN=4);
	
	CUR_TRIM(#41, #31, 0.02, 1.0:PEN=2);
	CUR_TRIM(#42, #32, 0.02, 1.0:PEN=2);
	
	!PART(#51, cur_reduce_offs(GLOBAL_REF(#21),  1.0, 21.3));
	!PART(#52, cur_reduce_offs(GLOBAL_REF(#21), -1.0, 21.3));
	
	!TCOPY(#61, #51#1, #30, 1 :  BLANK= 0, PEN=1);
	!TCOPY(#62, #52#1, #30, 1 :  BLANK= 0, PEN=1);

	
	!SUR_RULED(#91, #41, #42 :PEN=3);

cur_pts( 1) := VEC(   -3.920735,    3.405729,    5.102041);
cur_pts( 2) := VEC(   -7.786292,    6.921258,   10.204082);
cur_pts( 3) := VEC(  -11.915206,    9.948103,   15.306122);
cur_pts( 4) := VEC(  -17.614612,   10.139461,   20.408163);
cur_pts( 5) := VEC(  -23.440678,   10.259892,   25.510204);
cur_pts( 6) := VEC(  -29.357584,   10.383355,   30.612245);
cur_pts( 7) := VEC(  -35.343276,   10.554296,   35.714286);
cur_pts( 8) := VEC(  -41.382347,   10.802459,   40.816327);
cur_pts( 9) := VEC(  -47.463331,   11.148733,   45.918367);
cur_pts(10) := VEC(  -53.576080,   11.610178,   51.020408);
cur_pts(11) := VEC(  -59.680987,   12.248336,   56.122449);
cur_pts(12) := VEC(  -65.758150,   13.088414,   61.224490);
cur_pts(13) := VEC(  -71.805843,   14.128503,   66.326531);
cur_pts(14) := VEC(  -77.820977,   15.366539,   71.428571);
cur_pts(15) := VEC(  -83.800943,   16.800332,   76.530612);
cur_pts(16) := VEC(  -89.743193,   18.427551,   81.632653);
cur_pts(17) := VEC(  -95.645249,   20.245732,   86.734694);
cur_pts(18) := VEC( -101.504710,   22.252277,   91.836735);
cur_pts(19) := VEC( -107.319260,   24.444462,   96.938776);
cur_pts(20) := VEC( -113.086668,   26.819442,  102.040816);
cur_pts(21) := VEC( -118.804804,   29.374252,  107.142857);
cur_pts(22) := VEC( -124.471635,   32.105822,  112.244898);
cur_pts(23) := VEC( -130.085235,   35.010977,  117.346939);
cur_pts(24) := VEC( -135.643788,   38.086446,  122.448980);
cur_pts(25) := VEC( -141.145592,   41.328873,  127.551020);
cur_pts(26) := VEC( -146.589066,   44.734825,  132.653061);
cur_pts(27) := VEC( -151.972746,   48.300798,  137.755102);
cur_pts(28) := VEC( -157.295296,   52.023228,  142.857143);
cur_pts(29) := VEC( -162.555500,   55.898502,  147.959184);
cur_pts(30) := VEC( -167.752275,   59.922964,  153.061224);
cur_pts(31) := VEC( -172.884661,   64.092930,  158.163265);
cur_pts(32) := VEC( -177.951791,   68.404726,  163.265306);
cur_pts(33) := VEC( -182.953059,   72.854539,  168.367347);
cur_pts(34) := VEC( -187.887815,   77.438716,  173.469388);
cur_pts(35) := VEC( -192.755278,   82.153280,  178.571429);
cur_pts(36) := VEC( -197.556103,   86.995315,  183.673469);
cur_pts(37) := VEC( -202.289158,   91.960304,  188.775510);
cur_pts(38) := VEC( -206.954618,   97.044922,  193.877551);
cur_pts(39) := VEC( -211.552534,  102.245540,  198.979592);
cur_pts(40) := VEC( -216.083047,  107.558597,  204.081633);
cur_pts(41) := VEC( -220.546408,  112.980588,  209.183673);
cur_pts(42) := VEC( -224.942970,  118.508066,  214.285714);
cur_pts(43) := VEC( -229.273192,  124.137652,  219.387755);
cur_pts(44) := VEC( -233.537626,  129.866038,  224.489796);
cur_pts(45) := VEC( -237.736919,  135.689995,  229.591837);
cur_pts(46) := VEC( -241.871806,  141.606374,  234.693878);
cur_pts(47) := VEC( -245.943104,  147.612114,  239.795918);
cur_pts(48) := VEC( -249.951714,  153.704241,  244.897959);
cur_pts(49) := VEC( -253.898606,  159.879879,  250.000000);
cur_pts(50) := VEC( -257.784825,  166.136244,  255.102041);
cur_pts(51) := VEC( -261.611480,  172.470653,  260.204082);
cur_pts(52) := VEC( -265.379739,  178.880522,  265.306122);
cur_pts(53) := VEC( -269.090831,  185.363371,  270.408163);
cur_pts(54) := VEC( -272.746033,  191.916824,  275.510204);
cur_pts(55) := VEC( -276.346675,  198.538608,  280.612245);
cur_pts(56) := VEC( -279.894126,  205.226560,  285.714286);
cur_pts(57) := VEC( -283.389798,  211.978618,  290.816327);
cur_pts(58) := VEC( -286.835137,  218.792831,  295.918367);
cur_pts(59) := VEC( -290.231118,  225.667597,  301.020408);
cur_pts(60) := VEC( -293.562284,  232.609169,  306.122449);
cur_pts(61) := VEC( -296.821260,  239.619226,  311.224490);
cur_pts(62) := VEC( -300.008763,  246.695475,  316.326531);
cur_pts(63) := VEC( -303.125581,  253.835685,  321.428571);
cur_pts(64) := VEC( -306.172597,  261.037673,  326.530612);
cur_pts(65) := VEC( -309.150745,  268.299329,  331.632653);
cur_pts(66) := VEC( -312.061064,  275.618592,  336.734694);
cur_pts(67) := VEC( -314.904679,  282.993464,  341.836735);
cur_pts(68) := VEC( -317.682809,  290.422005,  346.938776);
cur_pts(69) := VEC( -320.396777,  297.902340,  352.040816);
cur_pts(70) := VEC( -323.048018,  305.432651,  357.142857);
cur_pts(71) := VEC( -325.638090,  313.011186,  362.244898);
cur_pts(72) := VEC( -328.168687,  320.636256,  367.346939);
cur_pts(73) := VEC( -330.641653,  328.306234,  372.448980);
cur_pts(74) := VEC( -333.059004,  336.019563,  377.551020);
cur_pts(75) := VEC( -335.422942,  343.774752,  382.653061);
cur_pts(76) := VEC( -337.735898,  351.570378,  387.755102);
cur_pts(77) := VEC( -340.000547,  359.405095,  392.857143);
cur_pts(78) := VEC( -342.219875,  367.277627,  397.959184);
cur_pts(79) := VEC( -344.397183,  375.186784,  403.061224);
cur_pts(80) := VEC( -346.536192,  383.131459,  408.163265);
cur_pts(81) := VEC( -348.641101,  391.110635,  413.265306);
cur_pts(82) := VEC( -350.716696,  399.123395,  418.367347);
cur_pts(83) := VEC( -352.768543,  407.169391,  423.469388);
cur_pts(84) := VEC( -354.802837,  415.246857,  428.571429);
cur_pts(85) := VEC( -356.827149,  423.355894,  433.673469);
cur_pts(86) := VEC( -358.850328,  431.496094,  438.775510);
cur_pts(87) := VEC( -360.883024,  439.667232,  443.877551);
cur_pts(88) := VEC( -362.938260,  447.869296,  448.979592);
cur_pts(89) := VEC( -365.032280,  456.102538,  454.081633);
cur_pts(90) := VEC( -367.185796,  464.367535,  459.183673);
cur_pts(91) := VEC( -369.425978,  472.665280,  464.285714);
cur_pts(92) := VEC( -371.789707,  480.997323,  469.387755);
cur_pts(93) := VEC( -374.329383,  489.365980,  474.489796);
cur_pts(94) := VEC( -377.123860,  497.774701,  479.591837);
cur_pts(95) := VEC( -380.302448,  506.228731,  484.693878);
cur_pts(96) := VEC( -384.106452,  514.736517,  489.795918);
cur_pts(97) := VEC( -389.104647,  523.313484,  494.897959);

FOR pt_number := 1 TO 97 DO

    POI_FREE(#101, cur_pts(pt_number));

ENDFOR;

CUR_SPLARR(#1, "CHORD", 97, cur_pts : BLANK= 0, PEN=1);



	
ENDMODULE














