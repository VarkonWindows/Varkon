! ***************** affsattel  ****************************
!
! +++
! Create an Affensattel
!
! Revision history
! ________________
!
! 1996-06-23 Gunnar Liden
! 2000-02-15 Create no file if existing  Gunnar
! ---
!************************************************************

!sdesce Create an Affensattel
!sdescs Skapa en Affensattel

LOCAL  GEOMETRY MODULE affsattel  (
FLOAT delta_uv :=   400.0 > "Parameter definition area");

! +++
! Affensattel 
! ___________
!
! Reference: Manfredo P. do Carmo, 
!            Differentialgeometrie von Kurven und Flächen
!                                 
!  x(u,v) = u
!  y(u,v) = v
!  z(u,v) = u**3 - 3*v**2*u
!
! Reparameterisation
!
! u=  us shall be s = 0  ==>  u = us + (ue-us)*s        
! u=  ue shall be s = 1
!
! v=  vs shall be t = 0  ==>  v = vs + (ve-vs)*t
! v=  ve shall be t = 1
!
!
!  x(u,v) = us + (ue-us)*s
!  y(u,v) = vs + (ve-vs)*t
!  z(u,v) = (us + (ue-us)*s)**3 - 3*(vs + (ve-vs)*t)**2*(us + (ue-us)*s)
!
! Let us = -1, ue = 0, vs = -1 and ve = 0 ==>
!
!
!  x(u,v) = us + (ue-us)*s = -1 + s
!  y(u,v) = vs + (ve-vs)*t = -1 + t
!  z(u,v) = (-1 + s)**3 - 3*(-1 + t)**2*(-1+s)
!
!  z(u,v) = (-1 + s)**3 - 3*(-1 + t)**2*(-1+s)
!
!   Surface data header:  
!   -------------------
!
! Surface name          Total_number_of_patches            (Line 1)
! YTA/1                           594                      ( Ex. )                     
!
!   Patch data header:              
!   ------------------             
!                                                          
!    I1   I2   I3   I4  I5    I6   I7   I8   I9   I10      (Line 2)
!     1   48    1    0 1001    0    0   34   19    0       ( Ex. )
!                                                                  
!   where
!   I1  = 1 (always one)
!   I2  = Number of records (coefficients) = 48 for bicubic patch
!   I3  = Patch number in file
!   I4  = 0 (always zero)
!   I5  = Surface type = 1001 for bicubic surface
!   I6  = 0
!   I7  = 0
!   I8  = Number of U lines in the surface
!   I9  = Number of V lines in the surface
!   I10 = 0 (always zero)
!
!
!   The order of the coefficients for a patch:                    
!   -----------------------------------------                    
!                                                               
!   Line Coefficients   (    for    ) Coefficients   (    for    ) 
!                                                                 
!    1   a00x a00y a00z (1.0  * 1.0 ) a10x a10y a10z (U    * 1.0 ) 
!    2   a20x a20y a20z (U**2 * 1.0 ) a30x a30y a30z (U**3 * 1.0 ) 
!    3   a01x a01y a01z (1.0  * V   ) a11x a11y a11z (U    * V   ) 
!    4   a21x a21y a21z (U**2 * V   ) a31x a31y a31z (U**3 * V   ) 
!    5   a02x a02y a02z (1.0  * V**2) a12x a12y a12z (U    * V**2) 
!    6   a22x a22y a22z (U**2 * V**2) a32x a32y a32z (U**3 * V**2) 
!    7   a03x a03y a03z (1.0  * V**3) a13x a13y a13z (U    * V**3) 
!    8   a23x a23y a23z (U**2 * V**3) a33x a33y a34z (U**3 * V**3) 
!        ... empty line (no data) ...                      
!                                                                  
!  Order of coefficients in VARKON's GETCUBP output vector
!  _______________________________________________________
!
!  data( 1) = a00x      data( 2) = a00y      data( 3) = a00z    
!  data( 4) = a01x      data( 5) = a01y      data( 6) = a01z    
!  data( 7) = a02x      data( 8) = a02y      data( 9) = a02z    
!  data(10) = a03x      data(11) = a03y      data(12) = a03z    
!
!  data(13) = a10x      data(14) = a10y      data(15) = a10z    
!  data(16) = a11x      data(17) = a11y      data(18) = a11z    
!  data(19) = a12x      data(20) = a12y      data(21) = a12z    
!  data(22) = a13x      data(23) = a13y      data(24) = a13z    
!
!  data(25) = a20x      data(26) = a20y      data(27) = a20z    
!  data(28) = a21x      data(29) = a21y      data(30) = a21z    
!  data(31) = a22x      data(32) = a22y      data(33) = a22z    
!  data(34) = a23x      data(35) = a23y      data(36) = a23z    
!
!  data(37) = a30x      data(38) = a30y      data(39) = a30z    
!  data(40) = a31x      data(41) = a31y      data(42) = a31z    
!  data(43) = a32x      data(44) = a32y      data(45) = a32z    
!  data(46) = a33x      data(47) = a33y      data(48) = a33z    
!
! ---


! Internal variables

  FILE     dat;                 ! Output data file

  STRING   surname*30;          ! Surface name
  INT      npatu;               ! Number of patches in U direction
  INT      npatv;               ! Number of patches in V direction

  STRING   ermess1*40;          ! Error message
  STRING   ermess2*40;          ! Error message

  INT      nopat;               ! Total number of patches
  INT      iu;                  ! Loop index U patch
  INT      iv;                  ! Loop index V patch

  INT      i_d;                 ! Loop index for pdat
  FLOAT    pdat(48);            ! Patch data

  INT      i_c;                 ! Loop index character
  INT      no_c;                ! Number of characters isn surname

  FLOAT    a10x;                ! Coefficient to ( U    * 1.0  )
  FLOAT    a01y;                ! Coefficient to ( 1.0  * V    )
  FLOAT    a12z;                ! Coefficient to ( U    * V**2 )
  FLOAT    a30z;                ! Coefficient to ( U**3 * 1.0  )

  STRING   rad*132;             ! Line

  INT    DEBUG;                  ! Debug
  STRING s*1;                    ! For INPMT

BEGINMODULE

! +++
! Algorithm
! =========
! ---

! +++
! Initializations and checks      
! ---

  DEBUG := 0;                       ! Debug printout

  surname:= "AFFENSATTEL";          !
  ermess1:=surname+".DAT exists";   !
  ermess2:="Open "+surname+         !
           ".DAT failed";           !

  FOR i_d:= 1 TO 48 DO              ! Initialize data
    pdat(i_d) := 0.0;               !
  ENDFOR;                           !

! +++
! Coefficients for an Affensattel
! ---

  a10x :=  1.0;
  a01y :=  1.0;
  a12z := -3.0;
  a30z :=  1.0;

  pdat(13) := a10x;
  pdat( 5) := a01y;
  pdat(21) := a12z;
  pdat(39) := a30z;

! +++
! Open file. Exit with error if file already exists on 
! the active JOB directory
! ---

  OPEN(dat,"r",act_jobdir()     ! Check if file already exists
  +surname+".DAT");             !
  IF (IOSTAT(dat) <> 0 ) THEN   !
!     OK, file does not exist   !
      ;                         !
  ELSE                          !
     CLOSE(dat);
     GOTO  exists;
!    EXIT("ex_nmgbic  " +        !
!          ermess1 );            !
  ENDIF;                        !

  OPEN(dat,"w",act_jobdir()+    ! Open output .DAT (F07) file
        surname+".DAT");        !
  IF (IOSTAT(dat) <> 0 ) THEN   ! Check (program error)
    EXIT("ex_nmgbic  " +        !
          ermess2 );            !
  ENDIF;                        !

! +++
! Number of patches in U and V direction equal to one (1)
! ---

  npatu := 1;                    !
  npatv := 1;                    !


! +++
! Write header 
! ---

  no_c := LENGTH(surname);      ! No characters in surname
  rad:= "  " + surname;         ! Two blanks and surname
  FOR i_c:= 2+no_c TO 30 DO     ! Add blanks
    rad:= rad + " ";            !
  ENDFOR;                       !
  rad:=rad+STR(npatu*npatv,6,0);! Add total number of patches

  OUTSTR(dat,rad);              ! Write line 1
  OUTLIN(dat);                  ! End Of Line

! +++
! Write patch data
! ---

  nopat := 0;                   ! Initialize no patches

  FOR iv:= 1 TO npatv DO        ! Start loop V patches
   FOR iu:= 1 TO npatu DO       ! Start loop U patches
    nopat:= nopat+1;            ! An additional patch
    rad:= "  ";                 ! Patch data header     (Line 2)
    rad:= rad+STR(   1 ,5,0);   ! 
    rad:= rad+STR(  48 ,5,0);   ! 
    rad:= rad+STR(nopat,5,0);   ! 
    rad:= rad+STR(   0 ,5,0);   ! 
    rad:= rad+STR( 1001,5,0);   ! 
    rad:= rad+STR(   0 ,5,0);   ! 
    rad:= rad+STR(   0 ,5,0);   ! 
    rad:= rad+STR(npatu+1,5,0); ! 
    rad:= rad+STR(npatv+1,5,0); ! 
    rad:= rad+STR(   0 ,5,0);   ! 
    OUTSTR(dat,rad);            ! Write line 2
    OUTLIN(dat);                ! End Of Line

!    GETCUBP(s_id,iu,iv,pdat,    ! Get patch data
!             offset);           !

    rad:=    STR(pdat( 1),12,5);! a00x                  (Line 1)
    rad:=rad+STR(pdat( 2),12,5);! a00y
    rad:=rad+STR(pdat( 3),12,5);! a00z
    rad:=rad+STR(pdat(13),12,5);! a10x
    rad:=rad+STR(pdat(14),12,5);! a10y
    rad:=rad+STR(pdat(15),12,5);! a10z
    OUTSTR(dat,rad);            ! Write line 
    OUTLIN(dat);                ! End Of Line

    rad:=    STR(pdat(25),12,5);! a20x                  (Line 2)
    rad:=rad+STR(pdat(26),12,5);! a20y
    rad:=rad+STR(pdat(27),12,5);! a20z
    rad:=rad+STR(pdat(37),12,5);! a30x
    rad:=rad+STR(pdat(38),12,5);! a30y
    rad:=rad+STR(pdat(39),12,5);! a30z
    OUTSTR(dat,rad);            ! Write line 
    OUTLIN(dat);                ! End Of Line

    rad:=    STR(pdat( 4),12,5);! a01x                  (Line 3)
    rad:=rad+STR(pdat( 5),12,5);! a01y
    rad:=rad+STR(pdat( 6),12,5);! a01z
    rad:=rad+STR(pdat(16),12,5);! a11x
    rad:=rad+STR(pdat(17),12,5);! a11y
    rad:=rad+STR(pdat(18),12,5);! a11z
    OUTSTR(dat,rad);            ! Write line 
    OUTLIN(dat);                ! End Of Line

    rad:=    STR(pdat(28),12,5);! a21x                  (Line 4)
    rad:=rad+STR(pdat(29),12,5);! a21y
    rad:=rad+STR(pdat(30),12,5);! a21z
    rad:=rad+STR(pdat(40),12,5);! a31x
    rad:=rad+STR(pdat(41),12,5);! a31y
    rad:=rad+STR(pdat(42),12,5);! a31z
    OUTSTR(dat,rad);            ! Write line 
    OUTLIN(dat);                ! End Of Line

    rad:=    STR(pdat( 7),12,5);! a02x                  (Line 5)
    rad:=rad+STR(pdat( 8),12,5);! a02y
    rad:=rad+STR(pdat( 9),12,5);! a02z
    rad:=rad+STR(pdat(19),12,5);! a12x
    rad:=rad+STR(pdat(20),12,5);! a12y
    rad:=rad+STR(pdat(21),12,5);! a12z
    OUTSTR(dat,rad);            ! Write line 
    OUTLIN(dat);                ! End Of Line

    rad:=    STR(pdat(31),12,5);! a22x                  (Line 6)
    rad:=rad+STR(pdat(32),12,5);! a22y
    rad:=rad+STR(pdat(33),12,5);! a22z
    rad:=rad+STR(pdat(43),12,5);! a32x
    rad:=rad+STR(pdat(44),12,5);! a32y
    rad:=rad+STR(pdat(45),12,5);! a32z
    OUTSTR(dat,rad);            ! Write line 
    OUTLIN(dat);                ! End Of Line

    rad:=    STR(pdat(10),12,5);! a03x                  (Line 7)
    rad:=rad+STR(pdat(11),12,5);! a03y
    rad:=rad+STR(pdat(12),12,5);! a03z
    rad:=rad+STR(pdat(22),12,5);! a13x
    rad:=rad+STR(pdat(23),12,5);! a13y
    rad:=rad+STR(pdat(24),12,5);! a13z
    OUTSTR(dat,rad);            ! Write line 
    OUTLIN(dat);                ! End Of Line

    rad:=    STR(pdat(34),12,5);! a23x                  (Line 8)
    rad:=rad+STR(pdat(35),12,5);! a23y
    rad:=rad+STR(pdat(36),12,5);! a23z
    rad:=rad+STR(pdat(46),12,5);! a33x
    rad:=rad+STR(pdat(47),12,5);! a33y
    rad:=rad+STR(pdat(48),12,5);! a33z
    OUTSTR(dat,rad);            ! Write line 
    OUTLIN(dat);                ! End Of Line

    OUTLIN(dat);                ! Empty  Line           

   ENDFOR;                      ! End   loop U patches
  ENDFOR;                       ! End   loop V patches


! +++
! Close output file AFFENSATTEL.DAT
! ---

  CLOSE(dat);                   ! Close F07 file

! +++
! Import AFFENSATTEL surface (from NMG)
! --
exists:;
  SUR_EXDEF(#1,ACT_JOBDIR()+"AFFENSATTEL.DAT", "NMG_F07", "CUB_SUR":BLANK=1);

! +++
! Erase AFFENSATTEL.DAT surface text file 
! --

!  OS("rm "+ACT_JOBDIR()+"AFFENSATTEL.DAT");

ENDMODULE




