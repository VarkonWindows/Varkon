!******************** OPT_GETLV0**********************
! +++
! The function retrieves limits for the optimization variables
! 
! Output arrays will be initialized if lim_name not is defined.
!
! This module can only be called by another module
! since there are output VAR variables.                   
!
! Revision history
! ________________
!
! 1995-06-10 Gunnar Liden
! ---
!****************************************************


!sdesce Retrieve limits for objective variables 
!sdescs Hämta gränser för optimeringsvariablerna

BASIC GEOMETRY MODULE OPT_GETLV0 (
    STRING lim_name*10;          ! Name of variable module
    INT    no_tot ;              ! Total number of parameters
VAR REF    opt_pid(20);          ! References to parts with opt. variables 
VAR INT    opt_pno(20);          ! Parameter number in opt_pid
VAR INT    v_flag(20);           ! Flags       for variables
                                 ! Eq. -1: No limit defined
                                 ! Eq.  1: Only lower limit defined
                                 ! Eq.  2: Only upper limit defined
                                 ! Eq. 12: Both limits are defined
VAR FLOAT  l_lim(20);            ! Lower limit for variables
VAR FLOAT  u_lim(20) );          ! Upper limit for variables

! +++
!
! Internal variables:
!
                          ! All defined limits in active module:
  REF    lim_id_a(50);    ! References to lim_name
  INT    v_flag_a(50);    ! Flags       for variables
  FLOAT  l_lim_a(50);     ! Lower limit for variables
  FLOAT  u_lim_a(50);     ! Upper limit for variables
  INT    pno_a(50);       ! Parameter no for variables
! ---

  INT    i_p;             ! Loop index (lim_name) parts
  INT    i_v;             ! Loop index variables         
  INT    i_f;             ! For comparison of strings
  INT    no_part;         ! Number of lim_name parts
  INT    i_r;             ! Loop index references 
  REF    id;              ! Reference (# id)
  INT    i_var;           ! Loop index variable    
                          ! For function GETHDR:
  INT    typ;             ! Type of entity
  INT    nref;            ! Version number
  INT    blank;           ! Eq. 0: Unblanked  Eq. 1: Blanked
  INT    nivå;            ! Layer for entity
  INT    penna;           ! Pen number for entity
  REF    grupp_id(3);     ! Global identities for GROUP's
                          ! which the entity is s part of
                          ! For function GETPRT:
  STRING namn*10;         ! Name of part
  INT    mtyp;            ! Module type
                          ! Eq. 2: DRAWING
                          ! Eq. 3: GEOMETRY
  INT    mattr;           ! Module attribute
                          ! Eq. 1: LOCAL
                          ! Eq. 2: GLOBAL
                          ! Eq. 3: BASIC
  REF    kid;             ! Global identity for the
                          ! coordinate system which has 
                          ! been used to position a
                          ! module of type LOCAL
  INT    np;              ! Number of parameters in the part
  INT    mant;            ! Number of entities in the part
  REF    idm(500);        ! Array with global identities to
                          ! all entities in the part (if 
                          ! (there is space for all of them)

                          ! For function GETID: 
  STRING code*1;          ! Eq. F: First entity in GM      
                          ! Eq. N: Next entity 
                          ! Eq. n: Next entity same level
                          ! Eq. P: Next part   

  STRING s*1;             ! String for DEBUG (INPMT)
  INT    DEBUG;           ! Controls Debug

BEGINMODULE

! +++
! Algorithm
! ---

! +++
! 0. Initializations and checks of input data
! ---

  DEBUG := 0;                  ! Change to 0, 1 or 2        

  IF DEBUG = 1 THEN            ! Debug
    s:=INPMT("OPT_GETLV0 "     !
    +"lim_name "+ lim_name     !
     ,"", 1);                  !
  ENDIF;                       !

! +++
! Initialize output variables v_flag(i)= -1, i= 1,2,3,4,5, ...
! ---

  FOR i_p := 1 TO 20 DO        ! Output variables
    v_flag(i_p):= -1;          ! Flags for variable limits
    l_lim(i_p)  := 0.123456789;! Lower limit for variables
    u_lim(i_p)  := 0.123456789;! Upper limit for variables
  ENDFOR;                      !

! +++
! Return if lim_name not is defined.
! ---

  IF lim_name = ""  OR         ! Is lim_name defined ?
     lim_name = " "     THEN   !
    EXIT();                    !
  ENDIF;                       !

  FOR i_p := 1 TO 50 DO        ! Output variables
    lim_id_a(i_p):= #0;        ! References to lim_name
    v_flag_a(i_p):= -1;        ! Flags for variable limits
    l_lim_a(i_p):= 0.123456789;! Lower limit for variables
    u_lim_a(i_p):= 0.123456789;! Upper limit for variables
    pno_a(i_p)  := -1;         ! Parameter no for variables
  ENDFOR;                      !

  IF no_tot <=  0  THEN        ! Check no_tot
    EXIT("OPT_GETLV1 no_tot "+ !
         " <= 0");             !
  ENDIF;                       !

  IF no_tot >  20  THEN        !
    EXIT("OPT_GETLV1 no_tot "+ !
         " > 20");             !
  ENDIF;                       !

  no_part  := 0;               ! Number of parts lim_name

! +++
! 1. Retrieve data from all instances of lim_name 
! ---

  code := "F";                 ! Point to first entity in GM

  id := GETID(code);           ! Retrieve first entity       

  IF DEBUG = 1 THEN            ! Debug
    s:=INPMT("OPT_GETLV0 id "  !
     + RSTR(id) + " First "    !
     ,"", 1);                  !
  ENDIF;                       !

  GETHDR(id,typ,nref,          ! Header data for entity    
  blank,nivå,penna,grupp_id);  ! 

  IF DEBUG = 1 THEN            ! Debug
    s:=INPMT("OPT_GETLV0 typ  "!
     + str(typ ,-1,0) + " "    !
     ,"", 1);                  !
  ENDIF;                       !

  code := "P";                 ! Retrieve only parts

! +++
! Loop all parts in the active module (max 3000)
! ---

  FOR i_r := 1 TO 3000  DO     ! Start loop all references

    IF i_r=1 AND typ=16384 THEN! First entity was a part     
      ;                        ! do not step in GM         
    ELSE                       !
      id := GETID(code);       ! Reference to next part  
    ENDIF;                     ! 

    IF DEBUG = 1 THEN            ! Debug
     s:=INPMT("OPT_GETLV0 i_r "!
       + STR(i_r ,-1,0) +      !
           " id " + RSTR(id)   !
       ,"", 1);                !
    ENDIF;                     !

    IF id = #0 THEN            ! Go to   Label calc if
      GOTO calc;               ! there are no more parts 
    ENDIF;                     ! in the active module

    GETPRT(id,namn,mtyp,       ! Retrieve data for the part
     mattr,kid,np,mant,idm);   !

    IF DEBUG = 1 THEN          ! Debug
      s:=INPMT("OPT_GETLV0 "   !
      +"lim_name "+ lim_name   !
      +" Part name "+ namn     !
       ,"", 1);                !
    ENDIF;                     !

    IF namn <> lim_name   THEN ! Next entity if not lim_name   
      GOTO next;               ! (goto next in this case)
    ENDIF;                     !

    no_part  := no_part  + 1;  ! An additional instance of
    IF no_part  >  50  THEN    ! lim_name (max is 50)         
      EXIT("OPT_GETLV0 Max. "+ !
      "no lim_name is 50");    !
    ENDIF;                     !

! +++
!   Data to v_flag_a, l_lim_a and u_lim_a if the part name is 
!   equal to lim_name.
! ---   

    IF GETREF(id,1) = #0 THEN  !
      lim_id_a(no_part) := id; ! Reference to lim_name
    ELSE                       !
      lim_id_a(no_part) :=     ! 
         GETREF(id,1);         !
    ENDIF;                     !
    v_flag_a(no_part) :=       ! Flag for variable limits
              GETINT(id,2);    !
    l_lim_a(no_part)  :=       ! Lower limit for variable
              GETFLT(id,3);    !
    u_lim_a(no_part)  :=       ! Upper limit for variable
              GETFLT(id,4);    !

    pno_a(no_part)    :=       ! Parameter no for variable
              GETINT(id,5);    !

next:;                         ! Label: Next entity  

  ENDFOR;                      ! End   loop all references
  EXIT("OPT_GETLV0 Max. "+     !
   "number of parts is 3000"); !

calc:;                         ! Label: Whole active module scanned  


! +++
! 2. Data to output arrays
! ---

! +++
! Return if no lim_name instances were found
! ---

  IF no_part  = 0  THEN                ! Return if no lim_name is found
    EXIT();                            !
  ENDIF;                               !

  IF  DEBUG = 2  THEN                  ! Debug
    LST_INI("OPT_GETLV0 Retrieved limits");
    FOR i_p:= 1 TO no_part DO          !
    LST_LIN(STR(i_p,4,0)+" v_flag_a "+ !
            STR(v_flag_a(i_p),3,0)+    !
            " l_lim_a "+               !
            STR(l_lim_a(i_p),15,8) +   !
            " u_lim_a "+               !
            STR(u_lim_a(i_p),15,8) );  !
    LST_LIN(STR(i_p,4,0)+" pno_a    "+ !
            STR(pno_a(i_p),3,0)+       !
            " lim_id_a "+              !
            RSTR(lim_id_a(i_p)));      !
    ENDFOR;                            !
    LST_LIN(" ");                      !
    LST_LIN("To be compared with ");   !
    FOR i_v:= 1 TO no_tot DO           !
    LST_LIN(STR(i_v,4,0)+" opt_pno  "+ !
            STR(opt_pno(i_v),3,0)+     !
            " opt_pid  "+              !
            RSTR(opt_pid(i_v)));       !
    ENDFOR;                            !
    LST_EXI();                         !
  ENDIF;                               !

  FOR  i_v := 1 to no_tot DO           !
    FOR i_p:= 1 TO no_part DO          !
      i_f:= FINDS(                     ! Compare id's (Find equal string)
       RSTR(lim_id_a(i_p)),            ! 
       RSTR(opt_pid(i_v)));            !
       IF i_f > 0 AND                  ! Compare id and parameter number
          pno_a(i_p)=opt_pno(i_v) THEN !
         IF v_flag(i_v) > 0 THEN       ! Check if limits already defined
           EXIT("OPT_GETLV0 Multiple "+!
           "limits param " +           !
           RSTR(opt_pid(i_p))+" "+     !
           STR(opt_pno(i_p),-1,0) );   !
         ENDIF;                        !
         v_flag(i_v):= v_flag_a(i_p);  !
         l_lim(i_v) :=  l_lim_a(i_p);  !
         u_lim(i_v) :=  u_lim_a(i_p);  !
       ENDIF;                          !
    ENDFOR;                            !
  ENDFOR;                              !

  IF  DEBUG = 1  THEN                  ! Debug
    LST_INI("OPT_GETLV0 Limits");
    FOR i_v:= 1 TO no_tot DO           !
    LST_LIN(STR(i_v,4,0)+ " v_flag "+  !
            STR(v_flag(i_v),3,0)+      !
            " l_lim "+                 !
            STR(l_lim(i_v),15,8) +     !
            " u_lim "+                 !
            STR(u_lim(i_v),15,8) );    !
    ENDFOR;                            !
    LST_EXI();                         !
  ENDIF;                               !


ENDMODULE
