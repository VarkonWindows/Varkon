! ***************** opt_cavity ****************************

!

! +++

! Create a cavity surface for shooting and bouncing of rays

!

! Revision history

! ________________

!

! 1995-10-02 Gunnar Liden

!

! ---

!************************************************************



!sdesce Create a cavity surface for shooting and bouncing of rays

!sdescs Skapa en kanal yta att skjuta och studsa strålar i



GLOBAL  GEOMETRY MODULE opt_cavity (

FLOAT a_leng :=   400.0 > "Length of first  axis (a)";

FLOAT b_leng :=   200.0 > "Length of second axis (b)";

FLOAT a_pval :=     0.4 > "P value ( < 0.5 ) in first  axis direction (a)";

FLOAT b_pval :=     0.3 > "P value ( < 0.5 ) in second axis direction (b)";

FLOAT hole   :=     0.1 > "Output hole size (relative length of first axis)";

INT   graphic:=     1   >"=0: None =1: Show surface =2: Show all");



! Internal variables



  FLOAT  pval;                   ! P-value

  FLOAT  eps;                    ! Defines input "hole" in opt_cavity



  REF    spine_id;               ! Spine curve identity

  REF    lim1_id;                ! Maxwidth 1 curve

  REF    lim2_id;                ! Top curve        

  REF    lim3_id;                ! Maxwidth 2 curve

  REF    lim4_id;                ! Bottom curve     

  REF    tan1_id;                ! Tangent curve to maxwidth 1

  REF    tan2_id;                ! Tangent curve to top curve        

  REF    tan3_id;                ! Tangent curve to maxwidth 2

  REF    tan4_id;                ! Tangent curve to bottom curve     



  REF    bpval_id;                ! Pvalue function for b axis



  INT    bflag_c;                ! Blank flag for curves

  INT    bflag_s;                ! Blank flag for surface



  INT    DEBUG;                  ! Debug

  STRING s*1;                    ! For INPMT



BEGINMODULE



! +++

! Algorithm

! =========

! ---



! +++

! 1. Initializations and checks      

! ---



  DEBUG := 0;                       ! Debug printout



  IF   graphic = 0 THEN             ! 

    bflag_c := 1;                   !

    bflag_s := 1;                   !

  ELIF graphic = 1 THEN             ! 

    bflag_c := 1;                   !

    bflag_s := 0;                   !

  ELIF graphic = 2 THEN             ! 

    bflag_c := 0;                   !

    bflag_s := 0;                   !

  ELSE                              !

    bflag_c := 0;                   !

    bflag_s := 0;                   ! 

  ENDIF;                            !



! +++

! 2. Create the spine curve

! ---



  eps := 0.01;                      !

  CUR_CONIC(#2, "FREE",             ! Straight line = X axis

   VEC(-a_leng*(1.0-eps ),0.0,0.0), !

   VEC( a_leng*(1.0-hole),0.0,0.0), !

                0.5,                !

   VEC( a_leng*(1.0-hole),0.0,0.0), !

   VEC(-a_leng*(1.0-eps ),0.0,0.0)  !

   :PEN=2,BLANK=bflag_c);           !



  spine_id:=GLOBAL_REF(#2 );        !



! +++

! 3. Create one P value curve for all strips

! ---



! +++

! The P value curve is a scalar function (not a R*3 curve),

! and shall not be transformed with the active coordinate 

! system. The P value curve must therefore be defined with

! the basic system active.

! ---



  IF a_pval  > 0.05 AND             ! Check P values

     a_pval < 0.5        THEN       !

    ;                               !

  ELSE                              !

    EXIT("opt_cavity a_pvalue not"+ !

         " OK");                    !

  ENDIF;                            !

  IF b_pval  > 0.05 AND             !

     b_pval < 0.5        THEN       !

    ;                               !

  ELSE                              !

    EXIT("opt_cavity b_pvalue not"+ !

         " OK");                    !

  ENDIF;                            !



  MODE_BASIC();                     !

  CUR_CONIC(#3 , "FREE",            ! 

    VEC(  0.0,   b_pval, 0.0),      !

    VEC(2*a_leng,b_pval, 0.0), 0.5, !

    VEC(2*a_leng,b_pval, 0.0),      !

    VEC(  0.0,   b_pval, 0.0)       !

   :PEN=1,BLANK=bflag_c);           !

  MODE_GLOBAL();                    !



  bpval_id:=GLOBAL_REF(#3 );         !



! +++

! 4. All limit and tangent curves are ellipses

! ---



  CUR_CONIC(#4, "FREE",                 ! Limit 1

   VEC(-a_leng,   0.0,   0.0 ),         !

   VEC(-a_leng,  -1.0,   0.0 ), a_pval, !

   VEC(  0.0  , -b_leng, 0.0 ),         !

   VEC(  1.0  , -b_leng, 0.0 ), a_pval, !

   VEC( a_leng,   0.0,   0.0 ),         !

   VEC( a_leng,   1.0,   0.0 )          !

   :PEN=4,BLANK=bflag_c);               !



  lim1_id:= GLOBAL_REF(#4 );            !



  CUR_CONIC(#5, "FREE",                 ! Limit 3

   VEC(-a_leng,   0.0,   0.0 ),         !

   VEC(-a_leng,   1.0,   0.0 ), a_pval, !

   VEC(  0.0  ,  b_leng, 0.0 ),         !

   VEC(  1.0  ,  b_leng, 0.0 ), a_pval, !

   VEC( a_leng,   0.0,   0.0 ),         !

   VEC( a_leng,  -1.0,   0.0 )          !

   :PEN=4,BLANK=bflag_c);               !



  lim3_id:= GLOBAL_REF(#5 );            !



  CSYS_1P(#6 ,"Transl_1",               !

      VEC(0,0,a_leng*0.2),0,0,0         !

   :PEN=3,BLANK=bflag_c);               !



  MODE_LOCAL(GLOBAL_REF(#6));           !



  CUR_CONIC(#7, "FREE",                 ! Tangent 1

   VEC(-a_leng,   0.0,   0.0 ),         !

   VEC(-a_leng,  -1.0,   0.0 ), a_pval, !

   VEC(  0.0  , -b_leng, 0.0 ),         !

   VEC(  1.0  , -b_leng, 0.0 ), a_pval, !

   VEC( a_leng,   0.0,   0.0 ),         !

   VEC( a_leng,   1.0,   0.0 )          !

   :PEN=4,BLANK=bflag_c);               !



  tan1_id:= GLOBAL_REF(#7 );            !



  CUR_CONIC(#8, "FREE",                 ! Tangent 3

   VEC(-a_leng,   0.0,   0.0 ),         !

   VEC(-a_leng,   1.0,   0.0 ), a_pval, !

   VEC(  0.0  ,  b_leng, 0.0 ),         !

   VEC(  1.0  ,  b_leng, 0.0 ), a_pval, !

   VEC( a_leng,   0.0,   0.0 ),         !

   VEC( a_leng,  -1.0,   0.0 )          !

   :PEN=4,BLANK=bflag_c);               !



  tan3_id:= GLOBAL_REF(#8 );            !





  MODE_GLOBAL();                        !



  CSYS_1P(#9 ,"Rotation",               !

      VEC(0,0,  0.0 ),90.0,0,0          !

   :PEN=3,BLANK=bflag_c);               !



  MODE_LOCAL(GLOBAL_REF(#9));           !





  CUR_CONIC(#10,"FREE",                 ! Limit 2

   VEC(-a_leng,   0.0,   0.0 ),         !

   VEC(-a_leng,  -1.0,   0.0 ), a_pval, !

   VEC(  0.0  , -b_leng, 0.0 ),         !

   VEC(  1.0  , -b_leng, 0.0 ), a_pval, !

   VEC( a_leng,   0.0,   0.0 ),         !

   VEC( a_leng,   1.0,   0.0 )          !

   :PEN=4,BLANK=bflag_c);               !



  lim2_id:= GLOBAL_REF(#10);            !



  CUR_CONIC(#11,"FREE",                 ! Limit 4

   VEC(-a_leng,   0.0,   0.0 ),         !

   VEC(-a_leng,   1.0,   0.0 ), a_pval, !

   VEC(  0.0  ,  b_leng, 0.0 ),         !

   VEC(  1.0  ,  b_leng, 0.0 ), a_pval, !

   VEC( a_leng,   0.0,   0.0 ),         !

   VEC( a_leng,  -1.0,   0.0 )          !

   :PEN=4,BLANK=bflag_c);               !



  lim4_id:= GLOBAL_REF(#11);            !



  CSYS_1P(#12,"Transl_1",               !

      VEC(0,0,a_leng*0.2),0,0,0         !

   :PEN=3,BLANK=bflag_c);               !



  MODE_LOCAL(GLOBAL_REF(#12));          !



  CUR_CONIC(#13,"FREE",                 ! Tangent 2

   VEC(-a_leng,   0.0,   0.0 ),         !

   VEC(-a_leng,  -1.0,   0.0 ), a_pval, !

   VEC(  0.0  , -b_leng, 0.0 ),         !

   VEC(  1.0  , -b_leng, 0.0 ), a_pval, !

   VEC( a_leng,   0.0,   0.0 ),         !

   VEC( a_leng,   1.0,   0.0 )          !

   :PEN=4,BLANK=bflag_c);               !



  tan2_id:= GLOBAL_REF(#13);            !



  CUR_CONIC(#14,"FREE",                 ! Tangent 4

   VEC(-a_leng,   0.0,   0.0 ),         !

   VEC(-a_leng,   1.0,   0.0 ), a_pval, !

   VEC(  0.0  ,  b_leng, 0.0 ),         !

   VEC(  1.0  ,  b_leng, 0.0 ), a_pval, !

   VEC( a_leng,   0.0,   0.0 ),         !

   VEC( a_leng,  -1.0,   0.0 )          !

   :PEN=4,BLANK=bflag_c);               !



  tan4_id:= GLOBAL_REF(#14);            !





  MODE_GLOBAL();                        !



! +++

! 10. Create the surface (identity #1)   

! ---



  SUR_CONIC(#1 , spine_id,              !

     lim1_id,tan1_id,"P",bpval_id,      !

     lim2_id,tan2_id,"P",bpval_id,      !

     lim3_id,tan3_id,"P",bpval_id,      !

     lim4_id,tan4_id,"P",bpval_id,      !

     lim1_id,tan1_id                    !

            :BLANK=bflag_s);            !



ENDMODULE

