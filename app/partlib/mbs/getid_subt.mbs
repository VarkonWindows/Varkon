!********************* getid_subt **************************************
! +++
! General function which retrieves identities to entities with a
! given (part) name or group name from a subtree in GM
!
! Revision history
! ________________
!
! 1995-08-30  Gunnar Liden
! 1995-11-08  GROUP case additions Gunnar Liden
! 
! ---
!************************************************************************

!sdesce Retrieve identities in a subtree for entities with a given name
!sdesce H{mta identiteter i ett deltr{d f|r storheter med givet name  

GLOBAL GEOMETRY MODULE getid_subt (
    REF     prt_id ;               ! Reference to top part of subtree
    STRING  s_string*50;           ! Search string (name)
    STRING  s_case*5;              ! Search case GROUP or PART
VAR INT     no_ent;                ! Number of entities
VAR REF     ent_id(3000) );        ! References (# id's)

! Internal variables

  STRING    code*1;                ! Flag for GM routine GETID
                                   ! F for first entity in GM
                                   ! N for next  entity 
                                   ! n for next  entity on same level
                                   ! P for next  part
  REF       id;                    ! Temporarely used id for GETID

  REF       end_id;                ! Next entity in GM after prt_id 

                                   ! For function GETPRT:
  STRING namn*10;                  ! Name of the part
  STRING  prt_name*10;             ! Name of part prep_id
  INT    mtyp;                     ! Module type
                                   ! Eq. 2: DRAWING
                                   ! Eq. 3: GEOMETRY
  INT    mattr;                    ! Module attribute
                                   ! Eq. 1: LOCAL
                                   ! Eq. 2: GLOBAL
                                   ! Eq. 3: BASIC
  REF    kid;                      ! Global identity for the 
                                   ! coord. system used to position
                                   ! the part
  INT    np;                       ! Number of parameters in the part
  INT    mant;                     ! Number of entities in the part
  REF    idm(200);                 ! Array with global references (##)
  INT    mant_lev1;                ! Number of entities in the part
  REF    idm_lev1(5);              ! Array with global references (##)

  INT       typ;                   ! Type of entity
  INT       nref;                  ! Number of references
  INT       blnk;                  !
  INT       niv;                   !
  INT       pen;                   !
  INT       nm;                    !
  INT       flag;                  ! ????

  REF       gid(3);                !
  REF       idvec(100);            !
  STRING    gnam*20;               ! Group name

  INT       no_iteration;          ! Number of iterations (program check)



  INT       ix1,ix2;               ! Temporarely used loop index

  INT       DEBUG;                 ! Debug parameter

  STRING    s*1;                   ! For debug printout to screen


BEGINMODULE

! +++
! Algorithm
! ---

! +++
! 1. Initializations
! ---


  DEBUG := 0;                      ! Change to 0 or 1

  IF   s_case = "GROUP" THEN       !
    ;                              !
  ELIF s_case = "group" THEN       !
    s_case:= "GROUP";              !
  ELIF s_case = "PART"  THEN       !
    ;                              !
  ELIF s_case = "part"  THEN       !
    s_case:= "PART";               !
  ELSE                             !
    EXIT("getid_subt s_case " +    !
         "not OK");                !
  ENDIF;                           !

  no_ent := 0;                     ! Initialize output variables
  IF  DEBUG = 1 THEN               !
    FOR ix1:=1 TO 3000 DO          ! 
      ent_id(ix1)  := #0;          !
    ENDFOR;                        !
  ENDIF;                           !

                
! +++
! 2. Find "limits" for the input subtree part (start and end adresse to part)
! ---

  code := "F";                     ! Flag for first entity in GM


  IF DEBUG = 1 THEN                !
  s:=INPMT("getid_subt: "+         ! Debug printout to screen
  "Input prt_id ="                 !
   +rstr(prt_id ),"",1);           !
  ENDIF;                           !

start:                             ! Label to find the input part

  id := GETID(code);               ! Get reference for next entity 

!   s:=INPMT("getid_subt: (1)"+     ! Debug printout to screen
!   " Retrieved id ="               !
!    +rstr(id),"",1);               !

  IF RSTR(id) = RSTR(prt_id )THEN  ! M}ste det vara str{ng ?????????
      code   := "n";               ! Flag for next entity on same level
      end_id := GETID(code);       ! Get end reference (entity which not
                                   ! is in input part (subtree) prt_id .
      GOTO step3;                  ! Next scanning phase

  ELIF id = #0 AND code = "P" THEN !
      EXIT("getid_subt: "+         ! Programming error for id= #0
       "No prt_id ");              !
  ELSE
      code := "P";                 ! Flag for next part in GM
      GOTO  start;                 ! Continue scanning of GM
  ENDIF;

  EXIT("getid_subt: "+             ! Programming error
   "No prt_id  in GM");            !


! +++
! 3. Retrieve references
! ---


step3:                             ! Retrieve GROUPS

  IF DEBUG = 1 THEN                !
   s:=INPMT("getid_subt: end_id="  ! Debug printout to screen
   +RSTR(end_id),"",1);            !
  ENDIF;                           !

  no_iteration := 0;               ! Number of iterations as a check


  code := "F";                     ! Flag for first entity in GM

subtree:                           ! Label to find entities in the subtree

  no_iteration := no_iteration+1;  ! Number of iterations as a check
  IF no_iteration > 9000 THEN      !
      EXIT("getid_subt: "+         ! Programming error
      "no_iteration > 9000");      !
  ENDIF;


  id := GETID(code);               ! Get reference for next entity 
  IF   code = "F" AND              !
         s_case = "PART"  THEN     !
      code := "P";                 ! Flag for next part in GM
  ELIF code = "F" AND              !
         s_case = "GROUP" THEN     !
      code := "N";                 ! Flag for next entity in GM
  ENDIF;


!   s:=INPMT("getid_subt: (2)"+    ! Debug printout to screen
! " Retrieved id ="+rstr(id),"",1);!


  IF RSTR(id) = RSTR(prt_id )THEN  ! M}ste det vara str{ng ?????????
                                   ! ???  IF id = prt_id  THEN
                                   ! Retrieved entity (part) = input id ?

!      s:=INPMT("getid_subt: (2)"+  ! Debug printout to screen
!     " id = prt_id  ="             !
!     +rstr(id),"",1);              !

      code   := "N";               ! Flag for next entity in the subtree
      GOTO subtree;                ! Start retrieving PARTS or GROUPS
  ELIF code = "P" THEN             !
      GOTO subtree;                ! Continue scanning for input part
  ELIF RSTR(id) = RSTR(end_id) THEN!
      GOTO a_ret;                  ! All PARTS or GROUPS are retrieved
  ENDIF;

  IF id <> #0 THEN                 !
      GETHDR(id,typ,nref,blnk,     ! Get header for retrieved entity id
             niv,pen,gid);         !
  ELSE                             !
      EXIT("getid_subt: "+         ! Programming error for id= #0
       "id= #0");                  !
  ENDIF;


!   s:=INPMT("getid_subt: typ="    !  Debug printout to screen
!   +str(typ,-1,0),"",1);


  IF   s_case = "GROUP" AND        !
       typ = 4096          THEN    ! Is the entity a GROUP ?
    GETGRP(id,gnam,nm,idvec);      ! Get data for entity GROUP
    IF s_string = gnam THEN        ! 
      FOR ix1:= 1 TO nm DO         !
       no_ent:= no_ent + 1;        !
       ent_id(no_ent):= idvec(ix1);!
      ENDFOR;                      !
    ENDIF;                         !
  ELIF s_case = "PART"  AND        !
          typ = 16384        THEN  ! Is the entity a PART ?
    GETPRT(id, prt_name,mtyp,      ! Get data about the part
     mattr,kid,np,mant,idm);       ! 
    IF s_string = prt_name THEN    ! 
      no_ent:= no_ent + 1;         !
      ent_id(no_ent):= id;         !
    ENDIF;                         !
  ELSE
    GOTO subtree;                  ! Continue scanning
  ENDIF;                           !


!   s:=INPMT("getid_subt: gnam= "  ! Debug printout to screen
!    +gnam,"",1);                  !


  GOTO  subtree;                   ! Continue scanning in the subtree


! +++
! 4. Exit
! ---

a_ret:;                            ! All data retrieved 


ENDMODULE
