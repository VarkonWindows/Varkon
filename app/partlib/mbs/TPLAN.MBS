!********************* TPLAN ********************************************
!
! Modifies a tangent in a conic curve and creates a new curve.
! The start and/or end segment tangent is moved in space in
! a plane defined by a given vector.
!
! Output:  #1.1#1.1  Conic curve
!
! 1992-11-23  Gunnar Liden
! 1992-12-14  a1=dang, v1=plv, a1max=dangmax, a1min=dangmin
!                                                Ronny Gyllensten
!  1993-01-20  Curve array sizes from (25) to (26)  Gunnar Liden
!  1993-06-17  dang <0.02 ==> too short circle ==> ON failure
!              (geo107 failure)                               Gunnar
!************************************************************************


GLOBAL GEOMETRY MODULE TPLAN (
REF    curve_id                  > "@t8 Select curve to modify ";
INT    i_point := 3              > "No. of point to modify ";
FLOAT  dang    :=0.5             > "Rot. angle for variable v? ";
INT    i_var   := 3              > "No. of used variable (?) ";
VECTOR plv     :=vec(1.0,1.0,1.0)> "@ Vector to define the plane";
FLOAT  dangmax :=+5.0            > "@ Upper limit for dang";
FLOAT  dangmin :=-5.0            > "@ Lower limit for dang";
INT    graphic := 1              > "@ Graphical representation ");

! Internal variables

  INT    no_points;              ! Number of points in the curve
  VECTOR psektI(26);             ! Segment start/end points
  VECTOR tpsektI(26);            ! Tangent points to psektI
  FLOAT  pvalsektI(26);          ! P values to curve
  VECTOR midpsektI(26);          ! Mid (P value) points

  VECTOR p_c;                    ! Start and/or end segment point
  VECTOR t_c;                    ! Start and/or end segment tangent
  VECTOR pout;                   ! Output point
  VECTOR tpout;                  ! Output tangent point
  VECTOR plv_n;                  ! Normalized plv vector
  FLOAT  length;                 ! Length of line

  INT    b_flag;                 ! For the graphical representation
  REF    group_id;               ! Identity for input curve group
  STRING group_name*20;          ! Input curve (GROUP) name: LIMij,

  INT       typ;                 ! Type of entity
  INT       nref;                ! Number of references
  INT       blnk;                !
  INT       niv;                 !
  INT       pen;                 !
  INT       nm;                  !
  INT       flag;                ! ????
                              
  REF       gid(3);              !
  REF       idvec(100);          !
  STRING    gnam*20;             ! Group name

  INT     DEBUG;                 ! Debug flag
                                 ! Eq. 0: No   debug
                                 ! Eq. 1: Full debug


  STRING curcode*20;             ! Curve (GROUP) name: MOD01VAR07

  STRING s*1;                    ! For debug printout to screen


BEGINMODULE

!               1. Initiations and check of input data
!               ======================================

  IF graphic = 1 OR              ! Graphical representation
     graphic = 2 THEN            !
    b_flag:= 0;                  !
  ELSE                           !
    b_flag:= 1;                  !
  ENDIF;                         !

  IF dangmax < 0.0 THEN            ! Check dangmax
    EXIT("Upper limit (dangmax)"+  !
         " less than zero");     !
  ENDIF;                         !
  IF dangmin > 0.0 THEN            ! Check dangmin
    EXIT("Lower limit (dangmin)"+  !
      " is greater than zero");  !
  ENDIF;                         !


  IF    dang < dangmin THEN      ! Check that dangmin <= dang <= dangmax
    EXIT("Angle is less"+        !
    " than lower limit");        !
  ELIF  dang > dangmax THEN      !
    EXIT("Angle is greater"+     !
    " than upper limit");        !
  ENDIF;                         !

  IF ABS(dang)  > 0.00001 THEN   ! Check vector plv if !dang! > 0
    IF ABS(plv.x)+ABS(plv.y)+    !
       ABS(plv.z) < 0.001  THEN   !
     EXIT("Angle (dang) is defined"!
     +" but not vector (plv)");   !
    ENDIF;                       !
  ENDIF;                         !

  curve_id :=                    ! One level reference
  GLOBAL_REF(curve_id,1);        !

!  s:=INPMT("TPLAN: curve_id="   ! Debug printout to screen
!  +rstr(curve_id),"",1);        !


  part(#5,CURTOVEC(curve_id,     ! Get number of points and
            no_points,           ! and points in arrays for
            psektI,              ! the input curve.
            tpsektI,             !
            pvalsektI,           !
            midpsektI)           !
            :SAVE=0);            ! Part (call) not saved in GM

!   s:=INPMT("TPLAN: no_points= " ! Debug printout to screen
!   +str(no_points ,-1,0),"",1);  !

  plv_n := VECN(plv);             ! Normalized plane vector


  length:=10.0;                 ! For tangent point calculation

!               2. Retrieve current point and tangent
!               =====================================

  p_c  := psektI(i_point);      ! Current  point   from array

  t_c  := tpsektI(i_point) -    ! Current  tangent from arrays
          psektI(i_point);      ! 

!           3. Create local coordinate (rotation) system
!           ============================================

  IF ABS(dang)  <= 0.00001 THEN ! Local system only for !dang! > 0
    ;                           !
  ELSE                          ! Create system for dang rotation of t_c
    CSYS_3P(#2,"dangrot", p_c,  !
    p_c + 10*t_c, p_c + 10*plv  !
    :BLANK=b_flag);             !
  ENDIF;                        !

!        4. Calculate (modified) tangent definition point
!        ================================================

! Algorithm:
! ----------
!
! For dang > 0
!    i. Create circle with start angle zero, end angle dang,
!       center equal to origin in the local system dangrot and
!       with radius equal to length
!   ii. Let tpout= end point of circle
! For dang = 0
!    i. Let tpout= p_c + length*t_c

!  IF ABS(dang)  > 0.00001 THEN  !
  IF ABS(dang)  >= 0.02 THEN  !
      MODE_LOCAL(#2);           ! Activate local system
      ARC_1POS(#3,VEC(0, 0, 0), ! Create circle in "no show"
      length, 0.0, dang :BLANK=1);!
      MODE_GLOBAL();            ! Activate global system
      tpout := ON(#3, 1.0);     ! tpout coordinates in global system
  ELSE
      tpout := p_c + length*t_c;! tpout for !dang!=0
  ENDIF;                        !

!   s:=INPMT("TPLAN: i_point= "  ! Debug printout to screen
!   +STR(i_point ,-1,0)+         !
!   " tpsektI(i_point) "         !
!   +STR(tpsektI(i_point).x,-12,6)
!    +" " !
!   +STR(tpsektI(i_point).y,-12,6)
!    +" " !
!   +STR(tpsektI(i_point).z,-12,6)
!   ,"",1);                      !

  tpsektI(i_point) := tpout;    ! Modified tangent to   array

!   s:=INPMT("TPLAN: i_point= "  ! Debug printout to screen
!   +STR(i_point ,-1,0)+         !
!   " tpsektI(i_point) "         !
!   +STR(tpsektI(i_point).x,-12,6)
!    +" " !
!   +STR(tpsektI(i_point).y,-12,6)
!    +" " !
!   +STR(tpsektI(i_point).z,-12,6)
!   ,"",1);                      !

!                     5. Create modified curve
!                     ========================

  BLANK(curve_id);              ! Blank input curve


  PART(#1,creusect              ! Create conic curve with points,
      (no_points,               ! tangent points and P value
       psektI,tpsektI,          ! 
       pvalsektI));             !

!                        6. Delete and add group
!                        ========================

  GETHDR(curve_id,typ,nref,blnk,! Get header for retrieved entity id
           niv,pen,gid);        !


  group_id := gid(1);           ! Group #id to output variable
  IF group_id <> #0  THEN       !
    GETGRP(group_id,gnam,nm,    ! Get data for entity GROUP
        idvec);                 !
    group_name:= gnam;          !
  ELSE                          !
    group_name:= "Not defined"; !
  ENDIF;


!  IF DEBUG=1  THEN              ! Debug
!  s:=INPMT("TPLAN: gid(1)= "    !
!  +RSTR(gid(1))                 !
!  +" group_id "                 !
!  +RSTR(group_id)               !
!  +" group_name "               !
!  +  group_name                 !
!  ,"",1);                       !
!  s:=INPMT("TPLAN: gid(2)= "    ! Debug printout to screen
!  +rstr(gid(2)),"",1);          !
!  s:=INPMT("TPLAN: gid(3)= "    ! Debug printout to screen
!  +rstr(gid(3)),"",1);          !
!  ENDIF;

  IF group_id <> #0  THEN       ! Delete input curve group
    DEL(group_id);              !
    GROUP(#6,group_name,        ! New group with the same name as
             REFC(1,1,1));      ! the input group (=curcode)
  ENDIF;                        !


!                   7. Register the modification
!                   ============================

      IF   i_point <   10  THEN !
        curcode:="MOD0"+        ! Curve (GROUP) name MODxx
        STR(i_point,-1,0);      !
      ELIF i_point <  100  THEN !
        curcode:="MOD"+         !
        STR(i_point,-1,0);      !
      ELSE                      !
        curcode:="MOD_ERROR";   !
      ENDIF;                    !

      IF   i_var <   10  THEN   !
        curcode:=curcode+"VAR0"+! Add VARyy to curve (GROUP) name MODxx
        STR(i_var,-1,0);        !
      ELIF i_var <  100  THEN   !
        curcode:=curcode+"VAR"+ !
        STR(i_var,-1,0);        !
      ELSE                      !
        curcode:="VAR_ERROR";   !
      ENDIF;                    !

!Tillf{lligt      GROUP(#15,curcode,        ! Curve code for modified curve
!Tillf{lligt               refc(1,1,1));     !


!                   5. Graphical representation
!                   ============================
!                   (See also system #2 above)

  IF graphic = 1 OR             ! Create point
     graphic = 2 THEN           !
    POI_FREE(#16,p_c);          !
    LIN_FREE(#17,p_c,tpout);    !
!    POI_FREE(#18,tpout);       !
  ENDIF;                        !


ENDMODULE
