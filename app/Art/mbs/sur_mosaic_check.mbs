!********************* sur_mosaic_check ***********************
! +++
! Checks the input data for sur_mosaic. Returns number of parameters
!
!
! ---
! Revision history
! ________________
!
! 2023-01-20  Gunnar Liden
! 
!
!*******************************************************

!sdesce Checks the input data for sur_mosaic.  Returns number of parameters

BASIC MODULE sur_mosaic_check(
    REF    id_sur_mosaic_input; ! Part with input data for sur_mosaic
VAR INT    out_n_params);       ! Number of part parameters


! Internal variables:

FILE       f_d;                    ! Debug file
CONSTANT INT debug_flag = 1;       ! Eq. 1: Write to debug file
CONSTANT STRING file_name = "C:\Varkon\app\Art\job\debug\sur_mosaic_check.txt"; 

! For function GETHDR
INT entity_type;                   ! Entity type code
INT version_number;                ! Version number
INT blank_flag;                    ! Blank flag Eq. 0: Visible Eq. 1: Unvisible
INT level_number;                  ! Level number
INT pen_number;                    ! Color number
REF group_ids(3);                  ! Group membership identities

! For function GETPRT
STRING part_name*30;               ! Name of the part
INT    module_type;                ! Module type Eq. 2: DRAWING Eq. 3: GEOMETRY
INT    module_attribute;           ! Module attribute LOCAL (1), GLOBAL (2), BASIC (3)
REF    global_id_csys;             ! Coordinate system identity positioning the part
INT    n_params;                   ! Number of parameters in the part
INT    n_members;                  ! Number of part members
REF    id_members(10);             ! Array with global entity references (##)

! Input data (for debug output)
STRING sur_file_name*10;           ! Surface file name with extension ( 1)
FLOAT  mosaic_size_u;              ! Mosaic arclength U direction     ( 2)
FLOAT  mosaic_size_v;              ! Mosaic arclength V direction     ( 3)
INT    mosaic_type;                ! Eq. 1: Two colors                ( 4)
INT    pen_1;                      ! Color one                        ( 5)
INT    pen_2;                      ! Color two                        ( 6)
INT    pen_3;                      ! Color three                      ( 7)
INT    pen_4;                      ! Color four                       ( 8)
INT    pen_5;                      ! Color five                       ( 9)
FLOAT  mosaic_offset;              ! Offset mosaic                    (10)
INT    trim_flag;                  ! Trim flag. Eq. 1: Trim surface   (11)
FLOAT  trim_start_u;               ! Surface U parameter start value  (12)
FLOAT  trim_end_u;                 ! Surface U parameter end value    (13)
FLOAT  trim_start_v;               ! Surface V parameter start value  (14)
FLOAT  trim_end_v;                 ! Surface V parameter end value    (15)
INT    graphic_flag;               ! Graphic flag                     (16)

BEGINMODULE

    GETHDR(id_sur_mosaic_input, entity_type, version_number, blank_flag, 
           level_number, pen_number, group_ids);
		  
    IF entity_type <> 16384 THEN
	
	  EXIT("sur_mosaic_check Input entity is not a part. Entity type is " + STR(entity_type, -1, 0));
	
	ENDIF;
	
	GETPRT( id_sur_mosaic_input, part_name, module_type, module_attribute, 
	        global_id_csys, n_params, n_members, id_members);
			
	IF FINDS(part_name, "sur_mosaic_") <> 1 THEN
	
	  EXIT("sur_mosaic_check Not input data for this module.  part_name= " + part_name);
	  
	ENDIF;
	
	! Output parameter
	! -----------------
	
	out_n_params := n_params;
	
    ! Check the input parameter types
	! -------------------------------
	
	IF GETTYP(id_sur_mosaic_input, 1) <> 3 THEN
	    EXIT("sur_mosaic_check Parameter  1 is not of type STRING");
	ENDIF;
	IF GETTYP(id_sur_mosaic_input, 2) <> 2 THEN
	    EXIT("sur_mosaic_check Parameter  2 is not of type FLOAT");
	ENDIF;
	IF GETTYP(id_sur_mosaic_input, 3) <> 2 THEN
	    EXIT("sur_mosaic_check Parameter  3 is not of type FLOAT");
	ENDIF;
	IF GETTYP(id_sur_mosaic_input, 4) <> 1 THEN
	    EXIT("sur_mosaic_check Parameter  4 is not of type INT");
	ENDIF;
	IF GETTYP(id_sur_mosaic_input, 5) <> 1 THEN
	    EXIT("sur_mosaic_check Parameter  5 is not of type INT");
	ENDIF;	
	IF GETTYP(id_sur_mosaic_input, 6) <> 1 THEN
	    EXIT("sur_mosaic_check Parameter  6 is not of type INT");
	ENDIF;
	IF GETTYP(id_sur_mosaic_input, 7) <> 1 THEN
	    EXIT("sur_mosaic_check Parameter  7 is not of type INT");
	ENDIF;	
	IF GETTYP(id_sur_mosaic_input, 8) <> 1 THEN
	    EXIT("sur_mosaic_check Parameter  8 is not of type INT");
	ENDIF;	
	IF GETTYP(id_sur_mosaic_input, 9) <> 1 THEN
	    EXIT("sur_mosaic_check Parameter  9 is not of type INT");
	ENDIF;	
	IF GETTYP(id_sur_mosaic_input,10) <> 2 THEN
	    EXIT("sur_mosaic_check Parameter 10 is not of type FLOAT");
	ENDIF;	
	IF GETTYP(id_sur_mosaic_input,11) <> 1 THEN
	    EXIT("sur_mosaic_check Parameter 11 is not of type INT");
	ENDIF;	
	IF GETTYP(id_sur_mosaic_input,12) <> 2 THEN
	    EXIT("sur_mosaic_check Parameter 12 is not of type FLOAT");
	ENDIF;	
	IF GETTYP(id_sur_mosaic_input,13) <> 2 THEN
	    EXIT("sur_mosaic_check Parameter 13 is not of type FLOAT");
	ENDIF;	
	IF GETTYP(id_sur_mosaic_input,14) <> 2 THEN
	    EXIT("sur_mosaic_check Parameter 14 is not of type FLOAT");
	ENDIF;
	IF GETTYP(id_sur_mosaic_input,15) <> 2 THEN
	    EXIT("sur_mosaic_check Parameter 15 is not of type FLOAT");
	ENDIF;
	IF GETTYP(id_sur_mosaic_input,16) <> 1 THEN
	    EXIT("sur_mosaic_check Parameter 16 is not of type INT");
	ENDIF;
	
	! Get the parameter values
	sur_file_name := GETSTR(id_sur_mosaic_input,  1);
	mosaic_size_u := GETFLT(id_sur_mosaic_input,  2);
	mosaic_size_v := GETFLT(id_sur_mosaic_input,  3);
	mosaic_type   := GETINT(id_sur_mosaic_input,  4);
	pen_1         := GETINT(id_sur_mosaic_input,  5);
	pen_2         := GETINT(id_sur_mosaic_input,  6);
	pen_3         := GETINT(id_sur_mosaic_input,  7);
	pen_4         := GETINT(id_sur_mosaic_input,  8);
	pen_5         := GETINT(id_sur_mosaic_input,  9);	
	mosaic_offset := GETFLT(id_sur_mosaic_input, 10);
	trim_flag     := GETINT(id_sur_mosaic_input, 11);	
	trim_start_u  := GETFLT(id_sur_mosaic_input, 12);
	trim_end_u    := GETFLT(id_sur_mosaic_input, 13);
	trim_start_v  := GETFLT(id_sur_mosaic_input, 14);
	trim_end_v    := GETFLT(id_sur_mosaic_input, 15);
	graphic_flag  := GETINT(id_sur_mosaic_input, 16);	
	
   IF debug_flag = 1 THEN
		! Open debug file
		OPEN(f_d, "W", file_name);
		
		OUTSTR(f_d, "Debug sur_mosaic.MBS");
		OUTLIN(f_d);
		
		OUTSTR(f_d, "id_sur_mosaic_input= " + RSTR(id_sur_mosaic_input));
		OUTLIN(f_d);
		
		OUTSTR(f_d, "Number of parameters is " + STR(n_params, -1, 0));
		OUTLIN(f_d);
		
		OUTSTR(f_d, "sur_file_name= " + sur_file_name);
		OUTLIN(f_d);
		
		OUTSTR(f_d, "mosaic_size_u= " + STR(mosaic_size_u, 12, 4));
		OUTLIN(f_d);
		
		OUTSTR(f_d, "mosaic_size_v= " + STR(mosaic_size_v, 12, 4));
		OUTLIN(f_d);
		
		OUTSTR(f_d, "mosaic_type=   " + STR(mosaic_type, 7, 0));
		OUTLIN(f_d);		
		
		OUTSTR(f_d, "pen_1=         " + STR(pen_1, 7, 0));
		OUTLIN(f_d);

		OUTSTR(f_d, "pen_2=         " + STR(pen_2, 7, 0));
		OUTLIN(f_d);

		OUTSTR(f_d, "pen_3=         " + STR(pen_3, 7, 0));
		OUTLIN(f_d);

		OUTSTR(f_d, "pen_4=         " + STR(pen_4, 7, 0));
		OUTLIN(f_d);

		OUTSTR(f_d, "pen_5=         " + STR(pen_5, 7, 0));
		OUTLIN(f_d);

		OUTSTR(f_d, "mosaic_offset= " + STR(mosaic_offset, 12, 4));
		OUTLIN(f_d);	
		
		OUTSTR(f_d, "trim_flag=     " + STR(trim_flag, 7, 0));
		OUTLIN(f_d);

		OUTSTR(f_d, "trim_start_u=  " + STR(trim_start_u, 12, 4));
		OUTLIN(f_d);		
		
		OUTSTR(f_d, "trim_end_u=    " + STR(trim_end_u, 12, 4));
		OUTLIN(f_d);	

		OUTSTR(f_d, "trim_start_v=  " + STR(trim_start_v, 12, 4));
		OUTLIN(f_d);		
		
		OUTSTR(f_d, "trim_end_v=    " + STR(trim_end_v, 12, 4));
		OUTLIN(f_d);
		
		OUTSTR(f_d, "graphic_flag=  " + STR(graphic_flag, 7, 0));
		OUTLIN(f_d);		
		
       ! Close debug file
        CLOSE(f_d);
		
	ENDIF;	
	
ENDMODULE














