! ***************** sphere_1   ****************************
!
! +++
! Create a sphere
!
! Revision history
! ________________
!
! 1996-06-22 Gunnar Liden
! ---
!************************************************************

!sdesce Create a sphere
!sdescs Skapa en sfär

LOCAL  GEOMETRY MODULE sphere_1   (
FLOAT radius :=   400.0 > "Radius of sphere";
INT   graphic:=  1   >"=0: None =1: Show surface =2: Show all");

! Internal variables

  FLOAT  pval;                   ! P-value
  FLOAT  eps;                    ! Defines "hole" in sphere

  REF    spine_id;               ! Spine curve identity
  REF    lim1_id;                ! Maxwidth 1 curve
  REF    lim2_id;                ! Top curve        
  REF    lim3_id;                ! Maxwidth 2 curve
  REF    lim4_id;                ! Bottom curve     
  REF    tan1_id;                ! Tangent curve to maxwidth 1
  REF    tan2_id;                ! Tangent curve to top curve        
  REF    tan3_id;                ! Tangent curve to maxwidth 2
  REF    tan4_id;                ! Tangent curve to bottom curve     

  REF    pval_id;                ! Pvalue function

  INT    bflag_c;                ! Blank flag for curves
  INT    bflag_s;                ! Blank flag for surface

  INT    DEBUG;                  ! Debug
  STRING s*1;                    ! For INPMT

BEGINMODULE

! +++
! Algorithm
! =========
! ---

! +++
! 1. Initializations and checks      
! ---

  DEBUG := 0;                       ! Debug printout

  IF   graphic = 0 THEN             ! 
    bflag_c := 1;                   !
    bflag_s := 1;                   !
  ELIF graphic = 1 THEN             ! 
    bflag_c := 1;                   !
    bflag_s := 0;                   !
  ELIF graphic = 2 THEN             ! 
    bflag_c := 0;                   !
    bflag_s := 0;                   !
  ELSE                              !
    bflag_c := 0;                   !
    bflag_s := 0;                   ! 
  ENDIF;                            !

! +++
! 2. Create the spine curve
! ---

  eps := 0.01;                      !
  CUR_CONIC(#2, "FREE",             ! Straight line = X axis
     VEC(-radius+eps,0.0,0.0),      !
     VEC( radius-eps,0.0,0.0), 0.5, !
     VEC( radius-eps,0.0,0.0),      !
     VEC(-radius+eps,0.0,0.0)       !
   :PEN=2,BLANK=bflag_c);           !
  spine_id:=GLOBAL_REF(#2);         !

! +++
! 3. Create P value curve for all surface strips
! ---

! +++
! The P value curve is a scalar function (not a R*3 curve),
! and shall not be transformed with the active coordinate 
! system. The P value curve must therefore be defined with
! the basic system active.
! ---

  pval     := SQRT(2)-1.0;          ! P value for quarter of circle

  MODE_BASIC();                     !
  CUR_CONIC(#3 , "FREE",            ! 
    VEC(  0.0,   pval, 0.0),        !
    VEC(2*radius,pval, 0.0), 0.5,   !
    VEC(2*radius,pval, 0.0),        !
    VEC(  0.0,   pval, 0.0)         !
   :PEN=1,BLANK=bflag_c);           !
  MODE_GLOBAL();                    !

  pval_id:=GLOBAL_REF(#3 );         !

! +++
! 4. All limit and tangent curves are circles
! ---

  ARC_1POS(#4 , VEC(0,0,0),         ! Limit 1 
       radius, 0.0, 180             !
   :PEN=4,BLANK=bflag_c);           !

  CUR_COMP(#15,#4 :BLANK=bflag_c);  !

  lim1_id:= GLOBAL_REF(#15);        !

  ARC_1POS(#5 , VEC(0,0,0),         ! Limit 3 
       radius,180.0, 360.0          !
   :PEN=4,BLANK=bflag_c);           !

  CUR_COMP(#16,#5 :BLANK=bflag_c);  !
  lim3_id:= GLOBAL_REF(#16);        !

  CSYS_1P(#6 ,"Transl_1",           !
      VEC(0,0,radius*0.2),0,0,0     !
   :PEN=3,BLANK=bflag_c);           !

  MODE_LOCAL(GLOBAL_REF(#6));       !


  ARC_1POS(#7 , VEC(0,0,0),         ! Tangent 1 
       radius, 0.0, 180             !
   :PEN=3,BLANK=bflag_c);           !

  CUR_COMP(#17,#7 :BLANK=bflag_c);  !

  tan1_id:= GLOBAL_REF(#17);        !

  ARC_1POS(#8 , VEC(0,0,0),         ! Tangent 3 
       radius,180.0, 360.0          !
   :PEN=3,BLANK=bflag_c);           !

  CUR_COMP(#18,#8 :BLANK=bflag_c);  !

  tan3_id:= GLOBAL_REF(#18);        !

  MODE_GLOBAL();                    !

  CSYS_1P(#9 ,"Rotation",           !
      VEC(0,0,  0.0 ),90.0,0,0      !
   :PEN=3,BLANK=bflag_c);           !

  MODE_LOCAL(GLOBAL_REF(#9));       !

  ARC_1POS(#10, VEC(0,0,0),         ! Limit 2 
       radius, 0.0, 180             !
   :PEN=4,BLANK=bflag_c);           !

  CUR_COMP(#19,#10:BLANK=bflag_c);  !

  lim2_id:= GLOBAL_REF(#19);        !

  ARC_1POS(#11, VEC(0,0,0),         ! Limit 4 
       radius,180.0, 360.0          !
   :PEN=4,BLANK=bflag_c);           !

  CUR_COMP(#20,#11:BLANK=bflag_c);  !

  lim4_id:= GLOBAL_REF(#20);        !

  CSYS_1P(#12,"Transl_2",           !
      VEC(0,0,radius*0.2),0,0,0     !
   :PEN=3,BLANK=bflag_c);           !

  MODE_LOCAL(GLOBAL_REF(#12));      !


  ARC_1POS(#13, VEC(0,0,0),         ! Tangent 2 
       radius, 0.0, 180             !
   :PEN=3,BLANK=bflag_c);           !

  CUR_COMP(#21,#13:BLANK=bflag_c);  !

  tan2_id:= GLOBAL_REF(#21);        !

  ARC_1POS(#14, VEC(0,0,0),         ! Tangent 4 
       radius,180.0, 360.0          !
   :PEN=3,BLANK=bflag_c);           !

  CUR_COMP(#22,#14:BLANK=bflag_c);  !

  tan4_id:= GLOBAL_REF(#22);        !

  MODE_GLOBAL();                    !


! +++
! 10. Create the surface (identity #1)   
! ---

  SUR_CONIC(#1 , spine_id,          !
     lim1_id,tan1_id,"P",pval_id,   !
     lim2_id,tan2_id,"P",pval_id,   !
     lim3_id,tan3_id,"P",pval_id,   !
     lim4_id,tan4_id,"P",pval_id,   !
     lim1_id,tan1_id                !
            :BLANK=bflag_s);        !

ENDMODULE
