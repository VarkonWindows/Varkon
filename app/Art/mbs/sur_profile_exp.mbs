!********************* sur_profile_exp ***********************
! +++
!
! Creates an output surface that will be saved to a file
!
! ---
! Revision history
! ________________
!
! 2023-01-30  Gunnar Liden
! 
!*******************************************************

!sdesce Creates an output surface that will be saved to a file

GLOBAL GEOMETRY MODULE sur_profile_exp(
    INT    n_curves;         ! Number of input curves
VAR REF    id_curves(101);   ! References to section curves that define the surface
    STRING sur_file_name*50; ! File name without extension (.F07)
	STRING sur_case*10;      ! Case CUBIC or LOFT
    INT    graphic_case);    ! Eq. 1 Surface Eq. 2 Curves Eq. 4 All



! Internal variables:

FILE       f_d;                    ! Debug file
CONSTANT INT debug_flag = 1;       ! Eq. 1: Write to debug file
CONSTANT STRING file_name = "C:\Varkon\app\Art\job\debug\sur_profile_exp.txt"; 

INT    b_val_sur;                  ! Blank value surface
INT    b_val_cur;                  ! Blank value curves
INT    b_val_poi;                  ! Blank value points

CONSTANT INT n_v = 9;              ! Number of V lines
FLOAT  cur_params(9);              ! Curve parameter values
REF    id_limit_curves(9);         ! Ids limit curves
REF    id_tang_curves(9);          ! Ids tangent curves
VECTOR limit_all_cur_pts(101,9);   ! Points for limit curves
VECTOR tang_all_cur_pts(101,9);    ! Points for tangent curves
INT    n_used_curves;              ! Number of used curves

INT    curve_number;               ! Loop variable curve number
INT    point_number;               ! Loop variable point number
REF    id_current_cur;             ! Id current curve
FLOAT  cur_t;                      ! Curve parameter value

REF    id_spine;                   ! Id spine
CONSTANT INT n_seg_spine = 10;     ! Number of spine segments
FLOAT  delta_spine_plane;          ! Delta for spine intersect plane
CONSTANT FLOAT eps_spine = 0.2;    ! Epsilon for intersect

INT    limit_cur_number;           ! Loop variable limit curve number
VECTOR limit_cur_pts(101);         ! Points for one limit curve
VECTOR tang_cur_pts(101);          ! Points for one tangent curve

VECTOR poi_debug;

BEGINMODULE

    IF sur_case = "CUBIC" OR sur_case = "cubic" THEN
	    PART(#20, sur_profile_exp_b(n_curves, id_curves, sur_file_name, graphic_case));
	ELIF sur_case = "LOFT" OR sur_case = "loft" THEN

		IF debug_flag = 1 THEN
			OPEN(f_d, "W", file_name);
			
			OUTSTR(f_d, "Debug sur_profile_exp.MBS");
			OUTLIN(f_d);
			
			CLOSE(f_d);
		ENDIF;
	ELSE
	    EXIT("sur_profile_exp Not an implemented sur_case= " + sur_case);
	ENDIF;
	
	IF n_curves > 101 THEN
	    EXIT("sur_profile_exp Input number of curves exceeds 101");
	ENDIF;
	
	! Set blank values
	IF     graphic_case = 0 THEN
	  b_val_sur := 1;
	  b_val_cur := 1;
	  b_val_poi := 1;
	ELIF     graphic_case = 1 THEN
	  b_val_sur := 0;
	  b_val_cur := 0;
	  b_val_poi := 1;
	ELIF   graphic_case = 2 THEN
	  b_val_sur := 0;
	  b_val_cur := 0;
	  b_val_poi := 1;
	ELIF   graphic_case = 3 THEN
	  b_val_sur := 0;
	  b_val_cur := 0;
	  b_val_poi := 1;
	ELSE
	  b_val_sur := 0;
	  b_val_cur := 1;
	  b_val_poi := 1;
	ENDIF;
	
	cur_params( 1) :=  0.0; ! Arc start
	cur_params( 3) :=  1.0; ! Arc end 
	cur_params( 3) :=  2.0; ! Arc start
	cur_params( 4) :=  3.0; ! Arc end 
	cur_params( 5) :=  4.0; ! Arc start
	cur_params( 6) :=  5.0; ! Arc end 
	cur_params( 7) :=  6.0; ! Arc start
	cur_params( 8) :=  7.0; ! Arc end 
	cur_params( 9) :=  8.0; ! Arc start
	
	n_used_curves := 0;
	
	!FOR  curve_number := 1 TO n_curves DO
	FOR  curve_number := 2 TO n_curves - 1 DO
	
	    n_used_curves := n_used_curves + 1;
	
	    id_current_cur := id_curves(curve_number);
		
		FOR point_number := 1 TO n_v DO
		
		    cur_t := cur_params(point_number);
			
			limit_all_cur_pts(n_used_curves, point_number) :=   ON(id_current_cur, cur_t); 
			
			tang_all_cur_pts( n_used_curves, point_number) := 
			          ON(id_current_cur, cur_t) + 30.0*VECN(TANG(id_current_cur, cur_t));
	
		ENDFOR;
	
	ENDFOR;
	
	FOR  limit_cur_number := 1 TO n_v DO
	
	    FOR point_number := 1 TO n_used_curves DO
		
		    limit_cur_pts(point_number) := limit_all_cur_pts(point_number, limit_cur_number);
		
		    tang_cur_pts(point_number) := tang_all_cur_pts(  point_number, limit_cur_number);
			
		ENDFOR;
		
		CUR_SPLARR(#2, "CHORD", n_used_curves, limit_cur_pts : BLANK= b_val_cur, PEN=1);
		
		CUR_SPLARR(#3, "CHORD", n_used_curves, tang_cur_pts  : BLANK= b_val_cur, PEN=2);
		
		IF debug_flag = 1 AND  limit_cur_number = 1 THEN
					
			OPEN(f_d, "A", file_name);
			
			FOR point_number := 1 TO n_used_curves DO
			
		        poi_debug := limit_cur_pts(point_number);
			
		        OUTSTR(f_d, "cur_pts(" + STR(point_number, 2, 0) + ") := VEC(" 
			    + STR(poi_debug.x, 12, 6) + ","  + STR(poi_debug.y, 12, 6) + "," + STR(poi_debug.z, 12, 6) + ");"    );
		        OUTLIN(f_d);
			
			ENDFOR;
			
			CLOSE(f_d);
		ENDIF;
		
	
	ENDFOR;
	
	
ENDMODULE














