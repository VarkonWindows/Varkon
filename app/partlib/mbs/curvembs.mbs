!******************** curvembs ************************************
!
!  Write a curve as a MBS module
!
!  1992-07-16  Gunnar Liden
!  1992-12-04  Possible to create new MBS file with the 
!              same name                                 Gunnar Liden
!  1993-01-20 Declaration of curve point arrays changed
!             from (25) to (26) (max number of segments 
!             is 25 in VARKON)                          Gunnar Liden
!  1993-01-21 Error graphic corrected and 
!             prompt string curcode added               Gunnar Liden
!
!********************************************************************

GLOBAL GEOMETRY MODULE curvembs(

STRING curname*9:= "LIMi_A1"    > "Name of curve";

INT    nopoints  := 2           > " Number of points in the curve" ;

VAR VECTOR psektI(26);          ! Curve definition points
                             
VAR VECTOR tpsektI(26);         ! Curve tangent definition points

VAR FLOAT  pvalsektI(26));      ! Curve P values

!                        Internal variables
!                        ===================

  INT    iseg;                  ! Loop index = segment in curve

  FILE   mbs;                   ! Output MBS file

  STRING typ*6;                 ! Type of curve (typ=FREE)

  STRING s*1;                   ! For INPMT

BEGINMODULE

!              1. Initializations and check of input data
!              ===========================================

  OPEN(mbs,"r",act_jobdir()     ! Check if file already exists
  +curname+".MBS");             !
  IF (IOSTAT(mbs) <> 0 ) THEN   !
!     OK, file does not exist   !
      ;                         !
  ELSE                          !
back:                           ! Label for a not valid answer
   s:=INPMT(curname+            !
     ".MBS exists."+            !
   "Delete old file (y/n) ?",   !
   "n",1);                      !
   IF    s="y" OR s="Y" THEN    !
     ;                          !
   ELIF  s="n" OR s="N" THEN    !
     GOTO nofil;                !
   ELSE                         !
     GOTO back;                 !
   ENDIF;                       !
  ENDIF;                        !

! 1992-12-04    EXIT("curvembs: MBS file "  !
! 1992-12-04       +curname+" exists");      !

  OPEN(mbs,"w",act_jobdir()+    ! Open output MBS file
        curname+".MBS");        !
  IF (IOSTAT(mbs) <> 0 ) THEN   ! Check (program error)
    EXIT("curvembs: Open of "   !
      +curname+" failed");      !
  ENDIF;                        !

  IF nopoints > 26 THEN         !
    EXIT("curvembs: nopoints"   ! Program error
       +" > 26 ");              !
  ENDIF;

  typ:= CHR(34)+"FREE"+CHR(34); ! Type of conic curve

!                      2. Header to MBS file
!                      ======================

  OUTSTR(mbs,"!********************************************** ");
  OUTLIN(mbs);
  OUTSTR(mbs,"! File is created with module curvembs.MBS ");
  OUTLIN(mbs);
  OUTSTR(mbs,"! (Version dated 1993-01-21) ");
  OUTLIN(mbs);
  OUTSTR(mbs,"!********************************************** ");
  OUTLIN(mbs);
  OUTLIN(mbs);

  OUTSTR(mbs,"GLOBAL GEOMETRY MODULE "+curname+"(");
  OUTLIN(mbs);
  OUTLIN(mbs);
  IF   SUBSTR(curname,1,3) = "LIM" THEN
  OUTSTR(mbs,"STRING curcode*20  :="+CHR(34)+"LIMij, ... "+CHR(34)+";");
  ELIF SUBSTR(curname,1,3) = "TAN" THEN
  OUTSTR(mbs,"STRING curcode*20  :="+CHR(34)+"TANij, ... "+CHR(34)+";");
  ELIF SUBSTR(curname,1,3) = "PCU" THEN
  OUTSTR(mbs,"STRING curcode*20  :="+CHR(34)+"PFNij, ... "+CHR(34)+";");
  ELIF SUBSTR(curname,1,3) = "MID" THEN
  OUTSTR(mbs,"STRING curcode*20  :="+CHR(34)+"MIDij, ... "+CHR(34)+";");
  ELIF SUBSTR(curname,1,5) = "SPINE" THEN
  OUTSTR(mbs,"STRING curcode*20  :="+CHR(34)+"SPINE      "+CHR(34)+";");
  ELSE
  OUTSTR(mbs,"STRING curcode*20  :="+CHR(34)+"UNDEFINED  "+CHR(34)+
            "> "+CHR(34)+"Curve code (GROUP name)"+CHR(34)+";");
  ENDIF;
  OUTLIN(mbs);
  OUTLIN(mbs);
  OUTSTR(mbs,"STRING comp_case*132:="+CHR(34)+"Not implemented"+CHR(34)+";");
  OUTLIN(mbs);
  OUTLIN(mbs);
  OUTSTR(mbs,"INT    graphic:= 2 >"+
             CHR(34)+"@ Graphical representation "+CHR(34)+";");
  OUTLIN(mbs);
  OUTLIN(mbs);
  OUTSTR(mbs,"FLOAT  v1:=  0.0 >"+CHR(34)+"@ Variabel  1"+CHR(34)+";");
  OUTLIN(mbs);
  OUTSTR(mbs,"FLOAT  v2:=  0.0 >"+CHR(34)+"@ Variabel  2"+CHR(34)+";");
  OUTLIN(mbs);
  OUTSTR(mbs,"FLOAT  v3:=  0.0 >"+CHR(34)+"@ Variabel  3"+CHR(34)+";");
  OUTLIN(mbs);
  OUTSTR(mbs,"FLOAT  v4:=  0.0 >"+CHR(34)+"@ Variabel  4"+CHR(34)+";");
  OUTLIN(mbs);
  OUTSTR(mbs,"FLOAT  v5:=  0.0 >"+CHR(34)+"@ Variabel  5"+CHR(34)+";");
  OUTLIN(mbs);
  OUTSTR(mbs,"FLOAT  v6:=  0.0 >"+CHR(34)+"@ Variabel  6"+CHR(34)+";");
  OUTLIN(mbs);
  OUTSTR(mbs,"FLOAT  v7:=  0.0 >"+CHR(34)+"@ Variabel  7"+CHR(34)+";");
  OUTLIN(mbs);
  OUTSTR(mbs,"FLOAT  v8:=  0.0 >"+CHR(34)+"@ Variabel  8"+CHR(34)+";");
  OUTLIN(mbs);
  OUTSTR(mbs,"FLOAT  v9:=  0.0 >"+CHR(34)+"@ Variabel  9"+CHR(34)+";");
  OUTLIN(mbs);
  OUTSTR(mbs,"FLOAT  v10:= 0.0 >"+CHR(34)+"@ Variabel 10"+CHR(34)+");");
  OUTLIN(mbs);
! Inte fler variabler {n att EDIT funktionen fungerar !!!!!
!Q  OUTSTR(mbs,"FLOAT  v11:= 0.0 >"+CHR(34)+"@ Variabel "+CHR(34)+";");
!Q   OUTLIN(mbs);
!Q   OUTSTR(mbs,"FLOAT  v12:= 0.0 >"+CHR(34)+"@ Variabel "+CHR(34)+";");
!Q   OUTLIN(mbs);
!Q   OUTSTR(mbs,"FLOAT  v13:= 0.0 >"+CHR(34)+"@ Variabel "+CHR(34)+";");
!Q   OUTLIN(mbs);
!Q   OUTSTR(mbs,"FLOAT  v14:= 0.0 >"+CHR(34)+"@ Variabel "+CHR(34)+";");
!Q   OUTLIN(mbs);
!Q   OUTSTR(mbs,"FLOAT  v15:= 0.0 >"+CHR(34)+"@ Variabel "+CHR(34)+";");
!Q   OUTLIN(mbs);
!Q   OUTSTR(mbs,"FLOAT  v16:= 0.0 >"+CHR(34)+"@ Variabel "+CHR(34)+";");
!Q   OUTLIN(mbs);
!Q   OUTSTR(mbs,"FLOAT  v17:= 0.0 >"+CHR(34)+"@ Variabel "+CHR(34)+";");
!Q   OUTLIN(mbs);
!Q   OUTSTR(mbs,"FLOAT  v18:= 0.0 >"+CHR(34)+"@ Variabel "+CHR(34)+";");
!Q   OUTLIN(mbs);
!Q   OUTSTR(mbs,"FLOAT  v19:= 0.0 >"+CHR(34)+"@ Variabel "+CHR(34)+";");
!Q   OUTLIN(mbs);
!Q   OUTSTR(mbs,"FLOAT  v20:= 0.0 >"+CHR(34)+"@ Variabel "+CHR(34)+");");
  OUTLIN(mbs);
  OUTLIN(mbs);
  OUTSTR(mbs,"! Internal variables:");
  OUTLIN(mbs);
  OUTLIN(mbs);
  OUTSTR(mbs,"  INT blank_flag; ! For the graphical representation");
  OUTLIN(mbs);
  OUTLIN(mbs);
  OUTLIN(mbs);

  OUTSTR(mbs,"BEGINMODULE");
  OUTLIN(mbs);
  OUTLIN(mbs);

!                  2. Graphical representation
!                  ============================

   OUTLIN(mbs);
   OUTLIN(mbs);
   OUTSTR(mbs,"!      1. Initiations and checks ");
   OUTLIN(mbs);
   OUTSTR(mbs,"!      ========================== ");
   OUTLIN(mbs);
   OUTLIN(mbs);
   OUTLIN(mbs);
   OUTSTR(mbs,"!      2. Graphical representation ");
   OUTLIN(mbs);
   OUTSTR(mbs,"!      =========================== ");
   OUTLIN(mbs);
   OUTLIN(mbs);
   OUTSTR(mbs,"  IF graphic = 2 THEN ");
   OUTLIN(mbs);
   IF   SUBSTR(curname,1,3) = "LIM" THEN
   OUTSTR(mbs,"      blank_flag := 0;  ");
   ELIF SUBSTR(curname,1,3) = "TAN" THEN
   OUTSTR(mbs,"      blank_flag := 1;  ");
   ELIF SUBSTR(curname,1,3) = "PCU" THEN
   OUTSTR(mbs,"      blank_flag := 1;  ");
   ELIF SUBSTR(curname,1,3) = "MID" THEN
   OUTSTR(mbs,"      blank_flag := 0;  ");
   ELIF SUBSTR(curname,1,5) = "SPINE" THEN
   OUTSTR(mbs,"      blank_flag := 0;  ");
   ELSE
   OUTSTR(mbs,"      blank_flag := 0;  ");
   ENDIF;
   OUTLIN(mbs);
   OUTSTR(mbs,"  ELSE ");
   OUTLIN(mbs);
   IF   SUBSTR(curname,1,3) = "LIM" THEN
   OUTSTR(mbs,"      blank_flag := 0;  ");
   ELIF SUBSTR(curname,1,3) = "TAN" THEN
   OUTSTR(mbs,"      blank_flag := 0;  ");
   ELIF SUBSTR(curname,1,3) = "PCU" THEN
   OUTSTR(mbs,"      blank_flag := 0;  ");
   ELIF SUBSTR(curname,1,3) = "MID" THEN
   OUTSTR(mbs,"      blank_flag := 0;  ");
   ELIF SUBSTR(curname,1,5) = "SPINE" THEN
   OUTSTR(mbs,"      blank_flag := 0;  ");
   ELSE
   OUTSTR(mbs,"      blank_flag := 1;  ");
   ENDIF;
   OUTLIN(mbs);
   OUTSTR(mbs,"  ENDIF; ");
   OUTLIN(mbs);
   OUTLIN(mbs);

!                       3. Curve definition data
!                       =========================

    OUTLIN(mbs);
    OUTLIN(mbs);
    OUTLIN(mbs);
    OUTSTR(mbs,"!      3. Creation of curve ");
    OUTLIN(mbs);
    OUTSTR(mbs,"!      ==================== ");
    OUTLIN(mbs);
    OUTLIN(mbs);
    OUTSTR(mbs,"CUR_CONIC(#1");
    OUTSTR(mbs,","+typ+",");
    OUTLIN(mbs);


    FOR iseg:=1 TO nopoints-1 DO

      OUTSTR(mbs,"vec(");
      OUTFLT(mbs,  psektI(iseg).x,12,6); OUTSTR(mbs,",");
      OUTFLT(mbs,  psektI(iseg).y,12,6); OUTSTR(mbs,",");
      OUTFLT(mbs,  psektI(iseg).z,12,6); OUTSTR(mbs,"), ! P "
                    +str(iseg,-1,0));

      OUTLIN(mbs);

      OUTSTR(mbs,"vec(");
      OUTFLT(mbs, tpsektI(iseg).x,12,6); OUTSTR(mbs,",");
      OUTFLT(mbs, tpsektI(iseg).y,12,6); OUTSTR(mbs,",");
      OUTFLT(mbs, tpsektI(iseg).z,12,6); OUTSTR(mbs,"), ! T ");

      OUTLIN(mbs);

      OUTFLT(mbs, pvalsektI(iseg),15,8); OUTSTR(mbs,
                        ",                             ! P value");

      OUTLIN(mbs);

     ENDFOR;
                   

     OUTSTR(mbs,"vec(");
     OUTFLT(mbs,  psektI(nopoints).x,12,6); OUTSTR(mbs,",");
     OUTFLT(mbs,  psektI(nopoints).y,12,6); OUTSTR(mbs,",");
     OUTFLT(mbs,  psektI(nopoints).z,12,6); OUTSTR(mbs,"), ! P "
                      +str(nopoints,-1,0));

     OUTLIN(mbs);

     OUTSTR(mbs,"vec(");
     OUTFLT(mbs, tpsektI(nopoints).x,12,6); OUTSTR(mbs,",");
     OUTFLT(mbs, tpsektI(nopoints).y,12,6); OUTSTR(mbs,",");
     OUTFLT(mbs, tpsektI(nopoints).z,12,6); OUTSTR(mbs,")  ! T ");
     OUTLIN(mbs);
     OUTSTR(mbs,"          :BLANK=blank_flag ); ");

!                  5. Registration
!                  ===============
   OUTLIN(mbs);
   OUTLIN(mbs);
   OUTSTR(mbs,"!      4. Registration of surface curve ");
   OUTLIN(mbs);
   OUTSTR(mbs,"!      ================================ ");
   OUTLIN(mbs);
   OUTLIN(mbs);
   OUTSTR(mbs,"!      (Link between curve and # - name ");
   OUTLIN(mbs);
   OUTLIN(mbs);
   OUTSTR(mbs,"  GROUP(#2, curcode , #1 ); ");
   OUTLIN(mbs);
   IF SUBSTR(curname,1,5) = "SPINE" THEN
   OUTLIN(mbs);
   OUTSTR(mbs,"!      5. Symbol for surface ");
   OUTLIN(mbs);
   OUTSTR(mbs,"!      ===================== ");
   OUTLIN(mbs);
   OUTLIN(mbs);
   OUTLIN(mbs);
   OUTLIN(mbs);
   OUTSTR(mbs,"  PART(#3 , CURARROW( #1 , 0.5 )); ");
   OUTLIN(mbs);
   OUTLIN(mbs);
   ENDIF;
!                  6. Print end statement in the MBS module
!                  =========================================
   OUTLIN(mbs);
   OUTLIN(mbs);
   OUTSTR(mbs,"ENDMODULE");


!                            5. Exit
!                            ========

  CLOSE(mbs);                   ! Close MBS file

nofil: ;                        ! Label: No file created

ENDMODULE
