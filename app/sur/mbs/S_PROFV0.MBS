! ******************* s_profv0 ******************************
! +++ 
!
! The function creates a profile surface on the X/Y plane
! of a local coordinate system
!
! --- 
!
!
! Revision history
! _______________ 
!
! 1997-03-07 Gunnar Liden
!
! ************************************************************

!sdesce Create a profile surface on X/Y plane of a local system
!sdescs Skapa en profil yta i X/Y planet på lokalt system

GLOBAL GEOMETRY MODULE s_profv0 (
REF    prt_id          >"@t16384 Profile (section) curve created in s_aprcv0";
REF    csy_id          >"Coordinate system";
REF    lin_id          >"@t2 Limit (longitudinal) line";
REF    cut_id          >"@t2 Cutting line";
INT    graphic := 1    >"=0: Show nothing =1: Show surface =2: Show all");

! Internal variables:

                         ! Data from s_aprcv0
  FLOAT  h_1;            ! Height 1
  FLOAT  h_2;            ! Height 2
  FLOAT  w_1;            ! Width  1
  FLOAT  pval_2;         ! P - value
  REF    csys_id_c;      ! System for graphical representation
  INT    graphic_c;      ! Graphics

  FLOAT  eps;            ! Epsilon for loft surface
  
  VECTOR pl_1;           ! Point 1 on input line
  VECTOR pl_2;           ! Point 2 on input line
  VECTOR pc_1;           ! Point 1 on cutting line
  VECTOR pc_2;           ! Point 2 on cutting line
  VECTOR pi_1;           ! Intersect point 1
  VECTOR pi_2;           ! Intersect point 2
  VECTOR po_1;           ! Point 1 on offset line
  VECTOR po_2;           ! Point 2 on offset line

  FLOAT  l_offs;         ! Offset to line for limit 5 curve

  REF    spine_id;       ! Spine   curve
  REF    lim1_id;        ! Limit   curve 1 identity
  REF    lim2_id;        ! Limit   curve 2 identity
  REF    lim3_id;        ! Limit   curve 3 identity
  REF    lim4_id;        ! Limit   curve 4 identity
  REF    lim5_id;        ! Limit   curve 5 identity
  REF    tan1_id;        ! Tangent curve 1 identity
  REF    tan2_id;        ! Tangent curve 2 identity
  REF    tan3_id;        ! Tangent curve 3 identity
  REF    tan4_id;        ! Tangent curve 4 identity
  REF    tan5_id;        ! Tangent curve 5 identity
  REF    tram_id;        ! Transformation for limit 2 and 4 curves 
  REF    trau_id;        ! Transformation for limit 3 curve
  REF    trat_id;        ! Transformation tangent curve 3
  REF    pval_id;        ! P-value curve
  REF    lft_id;         ! Lofing surface identity
  REF    pla_id;         ! Intersect B-plane identity
  REF    int_id;         ! Intersect identity
  REF    intall_id(20);  ! Intersect curve identities
  REF    iso1_id;        ! Isoparameter V=0 identity
  REF    iso2_id;        ! Isoparameter V=1 identity
  REF    iso3_id;        ! Isoparameter U=0 identity
  REF    comp_id;        ! Composite boundary curve identity
  
  FLOAT  int_s;          ! Intersect curve start parameter value
  FLOAT  int_e;          ! Intersect curve end   parameter value
  VECTOR int_uvs;        ! Intersect curve start UV parameter point
  VECTOR int_uve;        ! Intersect curve end   UV parameter point

  INT    n_branch;       ! Number of intersect branches
  INT    i_branch;       ! Loop index intersect branch
  
  FLOAT  iso1_e;         ! End   isoparameter value for iso1_id
  FLOAT  iso2_s;         ! Start isoparameter value for iso2_id
  FLOAT  int1_e;         ! End parameter for intersect branch 1
  FLOAT  int2_e;         ! End parameter for intersect branch 2
  
  
  FLOAT  radius;         ! Radius for spine cutting corner
    
  INT    b_val_s;        ! Blank value surfaces
  INT    b_val_a;        ! Blank value all other entities

  STRING s*1;            ! String for INPMT
  
BEGINMODULE

! +++ 
! Algorithm
! _________ 
! --- 


! +++
! 1. Initializations and checks
! ---

  IF    graphic = 0 THEN
    b_val_s := 1;
    b_val_a := 1;
  ELIF  graphic = 1 THEN
    b_val_s := 0;
    b_val_a := 1;
  ELIF  graphic = 2 THEN
    b_val_s := 0;
    b_val_a := 0;
  ELSE
    EXIT("s_profv0 graphic not 0, 1 or 2");
  ENDIF;

! Epsilon for safe surface/plane intersect
  eps := 10.0;
  
! Initialize local variables
  lim1_id   := #0;
  lim2_id   := #0;
  lim3_id   := #0;
  lim4_id   := #0;
  lim5_id   := #0;
  tan1_id   := #0;
  tan2_id   := #0;
  tan3_id   := #0;
  tan4_id   := #0;
  tan5_id   := #0; 
  pval_id   := #0;  
       
! +++
! Get data for the section curve    
! ---

! Check name of part !!!  To be added

  h_1     := GETFLT(prt_id,1);
  h_2     := GETFLT(prt_id,2);
  w_1     := GETFLT(prt_id,3);
  pval_2  := GETFLT(prt_id,4);

! +++
! 2. Create limit curves 1 and 5 and spine on the X/Y plane
! ---

! Activate local system 
  IF    csy_id = #0 THEN
    MODE_GLOBAL();
  ELSE
    MODE_LOCAL(csy_id);
  ENDIF;

! Project input line to X/Y plane
  pl_1 := ON(lin_id, 0.0);
  pl_2 := ON(lin_id, 1.0);
  
  LIN_PROJ(#2, pl_1, pl_2 :BLANK=b_val_a);

! Create offset line, which will be (part of) limit5 curve
  l_offs := -w_1; ! Add .. Defined by cut_id ...
  LIN_OFFS(#3, GLOBAL_REF(#2), l_offs : BLANK=b_val_a);


! Trimming point for limit 5 curve
  pi_1 := INTERSECT(cut_id, GLOBAL_REF(#3), -1);

  
! Trimming line for limit 1 curve
  po_1 := ON(GLOBAL_REF(#3),0.0);
  LIN_FREE(#4, pi_1, pi_1 + (pl_1 - po_1) : BLANK=b_val_a, PEN=2);

! Trimming point for limit 1 curve
  pi_2 := INTERSECT(GLOBAL_REF(#2), GLOBAL_REF(#4), -1);

  IF  graphic = 3 THEN
    POI_FREE(#101, pi_1 :PEN=2);
    POI_FREE(#102, po_1 :PEN=3);
    POI_FREE(#103, pi_2 :PEN=4);
  ENDIF;



! Create limit curves 1 and 5
  CUR_SPLINE(#5, "FREE", pl_1 , VEC(0,0,0), pi_2 + eps*VECN(pl_2-pl_1)
  , VEC(0,0,0):BLANK= b_val_a,PEN=3);
  lim1_id := GLOBAL_REF(#5);
  CUR_SPLINE(#6, "FREE", po_1 , VEC(0,0,0), pi_1 + eps*VECN(pl_2-pl_1)
  , VEC(0,0,0):BLANK= b_val_a);
  lim5_id := GLOBAL_REF(#6);

! Create spine curve
  CUR_SPLINE(#7, "FREE", pl_1+0.5*(po_1-pl_1) , VEC(0,0,0), 
  pi_2+0.5*(pi_1-pi_2) + eps*VECN(pl_2-pl_1)
              , VEC(0,0,0)  :BLANK= b_val_a);
  spine_id := GLOBAL_REF(#7);

! Activate global system
  MODE_GLOBAL();
  
 

! +++
! 3. Create the other limit and tangent curves 
! ---

! +++
! Transformation matrices
! ---

! Activate local system 
  IF    csy_id = #0 THEN
    MODE_GLOBAL();
  ELSE
    MODE_LOCAL(csy_id);
  ENDIF;

  TFORM_MOVE(#8 , VEC(0,0,0), VEC(0,0,h_1));
  tram_id := GLOBAL_REF(#8 );
  TFORM_MOVE(#11, VEC(0,0,0), VEC(0,0,h_1+h_2));
  trau_id := GLOBAL_REF(#11);
  TFORM_MOVE(#14, pl_1, po_1);
  trat_id := GLOBAL_REF(#14);
  
  MODE_GLOBAL();

! +++
! Limit 2, 3 and 4 curves
! ---

  TCOPY(#9 , lim1_id, tram_id);
  lim2_id := GLOBAL_REF(#9 );
  TCOPY(#10, lim5_id, tram_id);
  lim4_id := GLOBAL_REF(#10);
  TCOPY(#13, spine_id, trau_id);
  lim3_id := GLOBAL_REF(#13);  

! +++
! Tangent curves
! ---

  tan1_id := lim2_id;
  tan2_id := lim1_id;
  
  TCOPY(#15, lim3_id, trat_id);
  tan3_id := GLOBAL_REF(#15);    
    
  tan4_id := lim5_id;
  tan5_id := lim4_id;
  
! +++
! 4. Create the P-value curve 
! ---    

  MODE_BASIC();
  
  CUR_SPLINE(#16, "FREE", 
           VEC(    0,          pval_2, 0), VEC(0,0,0),
           VEC(ARCL(spine_id), pval_2, 0), VEC(0,0,0) :BLANK=b_val_a);

  pval_id := GLOBAL_REF(#16);
           
  MODE_GLOBAL();
  
! +++
! 5. Create surface
! ---

  SUR_CONIC(#17, spine_id,
                 lim1_id, tan1_id, "P", pval_id,
                 lim2_id, tan2_id, "P", pval_id,
                 lim3_id, tan3_id, "P", pval_id,
                 lim4_id, tan4_id, "P", pval_id,
                 lim5_id, tan5_id           :BLANK=b_val_s);
  lft_id := GLOBAL_REF(#17);

! +++
! 6. Create boundary curve
! ---

! +++
! Intersecting B-plane from input cutting line
! ---  

! Activate local system 
  IF    csy_id = #0 THEN
    MODE_GLOBAL();
  ELSE
    MODE_LOCAL(csy_id);
  ENDIF;

  pc_1 := ON(cut_id, 0.0);
  pc_2 := ON(cut_id, 1.0);
  
  B_PLANE(#18, pc_1, 
               pc_1 + 0.5*(pc_2-pc_1)+VEC(0,0,h_1+h_2),
               pc_1 + 0.5*(pc_2-pc_1)+VEC(0,0,h_1+h_2),
               pc_2
               :BLANK=b_val_a);
  pla_id := GLOBAL_REF(#18);
  
! Activate global system
  MODE_GLOBAL();

! Intersect surface and plane
  n_branch := N_CUR_INT(lft_id, pla_id);

 
  FOR  i_branch := 1 TO n_branch DO 
    
    CUR_INT(#19, lft_id, pla_id, i_branch:BLANK=b_val_a, PEN=2);
    intall_id(i_branch) := GLOBAL_REF(REFC(19,i_branch));
!    s:= INPMT("s_profv0 i_branch= "+STR(i_branch,-1,0)," ",1);  
  ENDFOR;
  IF  n_branch = 1 THEN
    int_id := intall_id(1);
  ELIF n_branch = 2 THEN
    int1_e := INV_ARCL(intall_id(1),ARCL(intall_id(1)));
    int2_e := INV_ARCL(intall_id(2),ARCL(intall_id(2)));
    EXIT("s_profv0 Not progr. for "+STR(n_branch,-1,0)+ " branches"); 
  ELSE
    EXIT("s_profv0 Not progr. for "+STR(n_branch,-1,0)+ " branches");
  ENDIF;
  
! Isoparameter end values
  int_s   :=  0.0;
  int_e   := INV_ARCL(int_id,ARCL(int_id));
  int_uvs := EVAL(int_id, "UV", VEC(int_s,0,0));
  int_uve := EVAL(int_id, "UV", VEC(int_e,0,0));
  IF    ABS(int_uvs.y-1.0) < 0.00001 AND ABS(int_uve.y-5.0) < 0.00001 THEN
    iso1_e := int_uvs.x-1.0;
    iso2_s := int_uve.x-1.0;
  ELIF  ABS(int_uve.y-1.0) < 0.00001 AND ABS(int_uvs.y-5.0) < 0.00001 THEN
    iso1_e := int_uve.x-1.0;
    iso2_s := int_uvs.x-1.0;
  ELSE
    EXIT("s_profv0 Isoparam program error");
  ENDIF;
 !   s:= INPMT("s_profv0 iso1_e= "+STR(iso1_e,-15,8)," ",1);   
 !   s:= INPMT("s_profv0 iso2_s= "+STR(iso2_s,-15,8)," ",1); 
  
! Isoparameters
  CUR_ISO(#20, lft_id, "V", 0.0, 0.0, iso1_e :BLANK=b_val_a, PEN=3);
  iso1_id := GLOBAL_REF(#20);
  CUR_ISO(#21, lft_id, "V", 4.0, iso2_s, 0.0 :BLANK=b_val_a, PEN=4);
  iso2_id := GLOBAL_REF(#21);
  CUR_ISO(#22, lft_id, "U", 0.0, 4.0, 0.0 :BLANK=b_val_a, PEN=2);
  iso3_id := GLOBAL_REF(#22);
  
! Composite boundary curve
  IF  graphic = 2 THEN
    POI_FREE(#104, ON(int_id,   0.0)   :PEN=2);
    POI_FREE(#105, ON(iso1_id,  1.0)   :PEN=4);
  ENDIF;


  CUR_COMP(#23,  iso3_id, iso1_id, int_id, iso2_id:BLANK=b_val_s,PEN=1);
  comp_id := GLOBAL_REF(#23);  
  
! +++
! 7. Create an approximate face, i.e. the output surface
! ---

  CUR_GL(#1, comp_id, "AFACE CUB_SUR ARCL_NUNV LIN_E 20. 5 10":BLANK=b_val_s);
               
ENDMODULE
