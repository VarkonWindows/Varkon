!********************* anabplanv0 ***********************
! +++
! Analyse (classify) a B-plane polygon                          
!
! Revision history
! ________________
!
! 1996-01-27  Gunnar Liden
! 
! ---
!*******************************************************

!sdescs Analysera polygonet f|r ett B-plan
!sdesce Analyse (classify) a B-plane polygon                          

GLOBAL GEOMETRY MODULE anabplanv0(

REF bpl1_id;          ! @t32768 Select B_PLANE   
INT graphic;          ! Graphics 0: None  1: Show normals 2: Show all   
VAR INT b_type;       ! Type of polygon
                      ! Eq.  1: Triangle
                      ! Eq.  2: Convex 4-point polygon
                      ! Eq.  3: Non-convex polygon
                      ! Eq.  4: p4, p1, p2 are colinear
                      ! Eq.  5: p1, p2, p3 are colinear
                      ! Eq.  6: p2, p3, p4 are colinear
                      ! Eq.  7: p3, p4, p1 are colinear
                      ! Eq. -1: p1 = p2            
                      ! Eq. -2: p3 = p4            
                      ! Eq. -3: p1 = p4            
                      ! Eq. -4: p1, p2, p3, p4 not coplanar
                      ! Eq. -5: Self-intersecting polygon
VAR INT p_nr);        ! Non-convex point number         

! Internal variables:

  
  INT        o_nr(4);            ! Not-equal vector directions
  INT        n_opposit;          ! Number of not-equal vector directions
  INT        i_p;                ! Loop index point

  VECTOR     p1 ,p2 ,p3 ,p4 ;    ! B-plane 1 corner points 

  CONSTANT FLOAT idpoint=0.02;   ! Identical point criterion

  VECTOR     v1;                 ! v1  = p2  - p1 
  VECTOR     v2;                 ! v2  = p3  - p2 
  VECTOR     v3;                 ! v3  = p4  - p3 
  VECTOR     v4;                 ! v4  = p1  - p4 

  VECTOR     v4xv1;              ! v4xv1  = v4 X v1
  VECTOR     v1xv2;              ! v1xv2  = v1 X v2
  VECTOR     v2xv3;              ! v2xv3  = v2 X v3
  VECTOR     v3xv4;              ! v3xv4  = v3 X v4

  VECTOR     n_plane;            ! Plane normal       
  FLOAT      d_plane;            ! Plane D value     
  FLOAT      c_plane;            ! Plane check D value     

  FLOAT      dot12;              ! Scalar product (v4xv1!v1xv2)
  FLOAT      dot23;              ! Scalar product (v4xv1!v2xv3)
  FLOAT      dot34;              ! Scalar product (v4xv1!v3xv4)

!A Alternative to colinear check calculation .......
!A  FLOAT      cos_alfa;           ! Cosinus for closest point calculation
!A  FLOAT      dist_clo;           ! Closest point distance

!A  FLOAT      u_clo;              ! Closest point parameter
!A  VECTOR     p_clo;              ! Closest point
!A  FLOAT      dist_che;           ! Check distance 

  FLOAT      ang_arrow;          ! Angle  for arrow
  FLOAT      l_arrow;            ! Length for arrow     
  VECTOR     ps;                 ! Start point for arrow  
  VECTOR     pe;                 ! End   point for arrow 


  INT        b_flag;             ! Blank value for output B-plane

  INT        DEBUG;              ! For Debug
                                 ! Eq. 0 ==> No        DEBUG
                                 ! Eq. 1 ==> Full      DEBUG

  STRING    s*1;                 ! For DEBUG 

BEGINMODULE

! +++
! Algorithm
! =========
! ---

! +++
! Initializations and checks of input data
! --- 

   DEBUG := 1;                       ! Change to 0 or 1

   b_type := -12345;                 ! Type of polygon
   p_nr   := -12345;                 ! Point number
   d_plane:= -0.123456789;
   c_plane:= -0.123456789;
   o_nr(1):=  -12345;
   o_nr(2):=  -12345;
   o_nr(3):=  -12345;
   o_nr(4):=  -12345;
   n_opposit := -12345;
   v4xv1  := VEC(0,0,0);
   v1xv2  := VEC(0,0,0);
   v2xv3  := VEC(0,0,0);
   v3xv4  := VEC(0,0,0);
   dot12  := -0.123456789;
   dot23  := -0.123456789;
   dot34  := -0.123456789;
   v1     := VEC(0,0,0);
   v2     := VEC(0,0,0);
   v3     := VEC(0,0,0);
   v4     := VEC(0,0,0);

!A   cos_alfa := -0.123456789;         ! Cosinus for closest point calculation
!A   dist_clo := -0.123456789;         ! Closest point distance
!A   u_clo := -0.123456789;
!A   p_clo := VEC(0,0,0);
!A   dist_che := -0.123456789;     

   IF    graphic = 0  THEN           ! Blank variable 
     b_flag:= 1;                     !
   ELIF  graphic = 1  THEN           !
     b_flag:= 0;                     !
   ELIF  graphic = 2  THEN           !
     b_flag:= 0;                     !
   ELSE                              !
     EXIT("anabplanv0: graphic "     !
          + "not OK");               !
   ENDIF;                            !


! +++
! Retrieve B_PLANE corner points
! --- 


  GETBPL(bpl1_id,p1 ,p2 ,p3 ,p4 );   ! Get B-plane 1 corner points

! +++
! Calculate edge vectors
! --- 

  v1 := VECN(p2  - p1) ;
  v2 := VECN(p3  - p2) ;
  v3 := VECN(p4  - p3) ;
  v4 := VECN(p1  - p4) ;

! +++
! Minimum distance between points is idpoint
! --- 

  IF  VECL(p2-p1) < idpoint THEN
    b_type := -1;
    p_nr   :=  0;
    EXIT();
  ENDIF;
  IF  VECL(p3-p4) < idpoint THEN
    b_type := -2;
    p_nr   :=  0;
    EXIT();
  ENDIF;
  IF  VECL(p4-p1) < idpoint THEN
    b_type := -3;
    p_nr   :=  0;
    EXIT();
  ENDIF;

  IF  graphic >= 2   THEN
    ang_arrow:= 15.0;
    l_arrow  := 0.1 * (VECL(p2 -p1 )+VECL(p3-p2)+VECL(p1-p4))/3.0;  
    pe       := p1  + 0.5*(p2 -p1 );
    ps       := p1 ;
    PART( #2, cpil2 ( ang_arrow , l_arrow, ps, pe ):PEN=4);
    IF  VECL(v2) > idpoint THEN
    pe       := p2  + 0.5*(p3 -p2 );
    ps       := p2 ;
    PART( #3, cpil2 ( ang_arrow , l_arrow, ps, pe ):PEN=4);
    ENDIF;
    pe       := p3  + 0.5*(p4 -p3 );
    ps       := p3 ;
    PART( #4, cpil2 ( ang_arrow , l_arrow, ps, pe ):PEN=4);
    pe       := p4  + 0.5*(p1 -p4 );
    ps       := p4 ;
    PART( #5, cpil2 ( ang_arrow , l_arrow, ps, pe ):PEN=4);
  ENDIF;

! +++
! Triangle ( p2 = p3 ) ?
! --- 

  IF  VECL(p2-p3) < idpoint THEN
    b_type :=  1;
    p_nr   :=  0;      
    dot12  := 0.123456789;
    dot23  := 0.123456789;
    dot34  := 0.123456789;
    GOTO triangle;
  ENDIF;

!A! +++
!A! Triangle (p1, p2, p3 colinear) ?
!A! --- 

!A  LIN_FREE(#21,p3-0.5*(p1-p3),p1+0.5*(p1-p3));
!A  u_clo := INV_ON(GLOBAL_REF(#21),p2,1);
!A  p_clo := ON(GLOBAL_REF(#21),u_clo);
!A  dist_che := VECL(p_clo-p2);

!A  IF  graphic >= 0   THEN
!A    POI_FREE(#20,p_clo:PEN=4);
!A  ENDIF;
  
!A  cos_alfa := v1*(p3-p1);
!A  cos_alfa := cos_alfa/VECL(v1)/VECL(p3-p1);
!A  dist_clo := (1.0-cos_alfa*cos_alfa)*v1*v1;
!A  dist_clo := SQRT(dist_clo);
!A  IF   dist_clo < idpoint THEN
!A    b_type :=  4;
!A    p_nr   :=  2;      
!A    dot12  := 0.123456789;
!A    dot23  := 0.123456789;
!A    dot34  := 0.123456789;
!A    GOTO triangle;
!A  ENDIF;

!A  cos_alfa := v2*(p4-p2);
!A  cos_alfa := cos_alfa/VECL(v2)/VECL(p4-p2);
!A  dist_clo := (1.0-cos_alfa*cos_alfa)*v2*v2;
!A  dist_clo := SQRT(dist_clo);
!A  IF   dist_clo < idpoint THEN
!A    b_type :=  5;
!A    p_nr   :=  3;      
!A    dot12  := 0.123456789;
!A    dot23  := 0.123456789;
!A    dot34  := 0.123456789;
!A    GOTO triangle;
!A  ENDIF;

!A  cos_alfa := v3*(p1-p3);
!A  cos_alfa := cos_alfa/VECL(v3)/VECL(p1-p3);
!A  dist_clo := (1.0-cos_alfa*cos_alfa)*v3*v3;
!A  dist_clo := SQRT(dist_clo);
!A  IF   dist_clo < idpoint THEN
!A    b_type :=  6;
!A    p_nr   :=  4;      
!A    dot12  := 0.123456789;
!A    dot23  := 0.123456789;
!A    dot34  := 0.123456789;
!A    GOTO triangle;
!A  ENDIF;

!A  cos_alfa := v4*(p2-p4);
!A  cos_alfa := cos_alfa/VECL(v4)/VECL(p2-p4);
!A  dist_clo := (1.0-cos_alfa*cos_alfa)*v4*v4;
!A  dist_clo := SQRT(dist_clo);
!A  IF   dist_clo < idpoint THEN
!A    b_type :=  7;
!A    p_nr   :=  1;      
!A    dot12  := 0.123456789;
!A    dot23  := 0.123456789;
!A    dot34  := 0.123456789;
!A    GOTO triangle;
!A  ENDIF;

! +++
! Cross product vectors in all corners
! --- 

  v4xv1  := VPROD(v4,v1);
  v1xv2  := VPROD(v1,v2);
  v2xv3  := VPROD(v2,v3);
  v3xv4  := VPROD(v3,v4);

  IF   VECL(v4xv1) < 0.00001 THEN
    b_type :=  4;
    p_nr   :=  1;      
    dot12  := 0.123456789;
    dot23  := 0.123456789;
    dot34  := 0.123456789;
    GOTO triangle;
  ENDIF;

  IF   VECL(v1xv2) < 0.00001 THEN
    b_type :=  5;
    p_nr   :=  2;      
    dot12  := 0.123456789;
    dot23  := 0.123456789;
    dot34  := 0.123456789;
    GOTO triangle;
  ENDIF;

  IF   VECL(v2xv3) < 0.00001 THEN
    b_type :=  6;
    p_nr   :=  3;      
    dot12  := 0.123456789;
    dot23  := 0.123456789;
    dot34  := 0.123456789;
    GOTO triangle;
  ENDIF;

  IF   VECL(v3xv4) < 0.00001 THEN
    b_type :=  7;
    p_nr   :=  4;      
    dot12  := 0.123456789;
    dot23  := 0.123456789;
    dot34  := 0.123456789;
    GOTO triangle;
  ENDIF;

! +++
! Check if polygon is planar
! --- 

  n_plane := VECN(v4xv1);
  d_plane := p1*n_plane;
  c_plane := p3*n_plane;

  IF ABS(d_plane-c_plane) > idpoint THEN
    b_type := -4;
    p_nr   :=  0;
    EXIT();
  ENDIF;

! +++
! Compare vector directions with first corner vector v4xv1 
! --- 

  dot12  := v4xv1*v1xv2;
  dot23  := v4xv1*v2xv3;
  dot34  := v4xv1*v3xv4;

  IF  graphic >= 1   THEN
    ang_arrow:= 15.0;
    l_arrow  := 0.1 * (VECL(p2 -p1 )+VECL(p3-p2)+VECL(p1-p4))/3.0;  
    pe       := p1  + 10.0*l_arrow*VECN(v4xv1);
    ps       := p1 ;
    PART( #6, cpil2 ( ang_arrow , l_arrow, ps, pe ):PEN=3);
    LIN_FREE(#22,ps ,pe :LFONT=1,LDASHL= 0.2*l_arrow,PEN=3);
    pe       := p2  + 10.0*l_arrow*VECN(v1xv2);
    ps       := p2 ;
    PART( #7, cpil2 ( ang_arrow , l_arrow, ps, pe ):PEN=3);
    LIN_FREE(#23,ps ,pe :LFONT=1,LDASHL= 0.2*l_arrow,PEN=3);
    pe       := p3  + 10.0*l_arrow*VECN(v2xv3);
    ps       := p3 ;
    PART( #8, cpil2 ( ang_arrow , l_arrow, ps, pe ):PEN=3);
    LIN_FREE(#24,ps ,pe :LFONT=1,LDASHL= 0.2*l_arrow,PEN=3);
    pe       := p4  + 10.0*l_arrow*VECN(v3xv4);
    ps       := p4 ;
    PART( #9, cpil2 ( ang_arrow , l_arrow, ps, pe ):PEN=3);
    LIN_FREE(#25,ps ,pe :LFONT=1,LDASHL= 0.2*l_arrow,PEN=3);
  ENDIF;

! +++
! Calculate diagonal vectors
! --- 

! +++
! Classification of the corner points 
! --- 

  o_nr(1):=  0;     
  o_nr(2):=  0;    
  o_nr(3):=  0;   
  o_nr(4):=  0;  
  n_opposit := 0;
  IF  dot12 <  0 THEN
    o_nr(2) := -1;
    n_opposit := n_opposit + 1;
  ENDIF;
  IF  dot23 <  0 THEN
    o_nr(3) := -1;
    n_opposit := n_opposit + 1;
  ENDIF;
  IF  dot34 <  0 THEN
    o_nr(4) := -1;
    n_opposit := n_opposit + 1;
  ENDIF;

  IF    n_opposit = 0 THEN
    b_type :=  2;
    p_nr   :=  0;
  ELIF  n_opposit = 1 THEN
    b_type :=  3;
    FOR i_p := 2 TO 4 DO
      IF  o_nr(i_p) < 0.0 THEN
        p_nr   :=  i_p;
      ENDIF;
    ENDFOR;
  ELIF  n_opposit = 3 THEN
    b_type :=  3;
    p_nr   :=  1;    
  ELIF  n_opposit = 2 THEN
    b_type := -5;
    p_nr   :=  0;
  ELSE
    EXIT("anabplanv0 Program error n_opposit "+STR(n_opposit,-1,0));
  ENDIF;

! +++
! Printout of data for DEBUG= 1
! ---

triangle:;

  IF  DEBUG = 1  THEN
  LST_INI("anabplanev0 Analyze a B-plane b_type= "+STR(b_type,-1,0)+
          " p_nr= "+STR(p_nr,-1,0) );
  LST_LIN("v1  "+STR( v1.x,8,5)+" "+STR( v1.y,8,5)+" "+STR( v1.z,8,5));
  LST_LIN("v2  "+STR( v2.x,8,5)+" "+STR( v2.y,8,5)+" "+STR( v2.z,8,5));
  LST_LIN("v3  "+STR( v3.x,8,5)+" "+STR( v3.y,8,5)+" "+STR( v3.z,8,5));
  LST_LIN("v4  "+STR( v4.x,8,5)+" "+STR( v4.y,8,5)+" "+STR( v4.z,8,5));
  LST_LIN("v4xv1 "+STR(VECL(v4xv1),10,5)+" v1xv2 "+STR(VECL(v1xv2),10,5)
      +" v2xv3 "+STR(VECL(v2xv3),10,5) +" v3xv4 "+STR(VECL(v3xv4),10,5));
!A  LST_LIN("cos_alfa "+STR(cos_alfa, 6,3)+" sin_alfa "+STR(sin_alfa, 6,3)
!A      +" dist_clo "+STR(dist_clo,15,8) +" dist_che "+STR(dist_che,15,8));
  LST_LIN("dot12 "+STR(dot12,12,1)+" dot23 "+STR(dot23,12,1)
        +" dot34 "+STR(dot34,12,1));
  LST_LIN("o_nr(2) "+STR(o_nr(2),3,0)+" (3) "+STR(o_nr(3),3,0)+
             " (4) "+STR(o_nr(4),3,0)+" n_opposit "+STR(n_opposit,3,0));
  LST_LIN("d_plane "+STR( d_plane,12,2)+" c_plane "+STR( c_plane,12,2)+
         " difference "+STR(d_plane-c_plane,8,5)+ " idpoint "+STR( idpoint ,8,5));
  LST_LIN("p1  "+STR(p1 .x,9,3)+" "+STR(p1 .y,9,3)+" "+STR(p1 .z,9,3));
  LST_LIN("p2  "+STR(p2 .x,9,3)+" "+STR(p2 .y,9,3)+" "+STR(p2 .z,9,3));
  LST_LIN("p3  "+STR(p3 .x,9,3)+" "+STR(p3 .y,9,3)+" "+STR(p3 .z,9,3));
  LST_LIN("p4  "+STR(p4 .x,9,3)+" "+STR(p4 .y,9,3)+" "+STR(p4 .z,9,3));
  LST_EXI();
  ENDIF;

ENDMODULE
